{
  "swagger" : "2.0",
  "info" : {
    "description" : "Vestorly Developers API",
    "version" : "1.0.0",
    "title" : "Vestorly API",
    "termsOfService" : "http://www.vestorly.com/terms/",
    "contact" : {
      "name" : "Vestorly Team"
    },
    "license" : {
      "name" : "MIT"
    }
  },
  "host" : "staging.vestorly.com",
  "basePath" : "/api/v2",
  "tags" : [ {
    "name" : "api docs",
    "description" : "Vestorly API docs",
    "externalDocs" : {
      "description" : "Find more info here",
      "url" : "https://developers.vestorly.com"
    }
  } ],
  "schemes" : [ "https" ],
  "paths" : {
    "/advisors" : {
      "get" : {
        "tags" : [ "advisors" ],
        "description" : "Returns all advisors",
        "operationId" : "findAdvisors",
        "parameters" : [ {
          "name" : "vestorly-auth",
          "in" : "query",
          "description" : "Vestorly Auth Token",
          "required" : true,
          "type" : "string",
          "format" : "string"
        } ]
      }
    },
    "/advisors/{id}" : {
      "get" : {
        "tags" : [ "advisors" ],
        "description" : "Returns a single advisor if the user has access",
        "operationId" : "findAdvisorByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Mongo ID of advisor to fetch",
          "required" : true,
          "type" : "string",
          "format" : "string"
        }, {
          "name" : "vestorly-auth",
          "in" : "query",
          "description" : "Vestorly Auth Token",
          "required" : true,
          "type" : "string",
          "format" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Advisor response",
            "schema" : {
              "$ref" : "#/definitions/Advisor"
            }
          }
        }
      }
    },
    "/articles" : {
      "get" : {
        "tags" : [ "articles" ],
        "description" : "Returns all articles",
        "operationId" : "findArticles",
        "parameters" : [ {
          "name" : "vestorly-auth",
          "in" : "query",
          "description" : "Vestorly Auth Token",
          "required" : true,
          "type" : "string",
          "format" : "string"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit on the number of articles to return",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "text_query",
          "in" : "query",
          "description" : "Search query parameter",
          "required" : false,
          "type" : "string",
          "format" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Response"
          }
        }
      }
    },
    "/articles/{id}" : {
      "get" : {
        "tags" : [ "articles" ],
        "description" : "Returns a single article",
        "operationId" : "findArticleByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Article Id to fetch",
          "required" : true,
          "type" : "string",
          "format" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Article response",
            "schema" : {
              "$ref" : "#/definitions/Article"
            }
          }
        }
      }
    },
    "/events" : {
      "get" : {
        "tags" : [ "events" ],
        "description" : "Returns all events",
        "operationId" : "findEvents",
        "parameters" : [ {
          "name" : "vestorly-auth",
          "in" : "query",
          "description" : "Vestorly Auth Token",
          "required" : true,
          "type" : "string",
          "format" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Event response",
            "schema" : {
              "$ref" : "#/definitions/Events"
            }
          }
        }
      }
    },
    "/events/{id}" : {
      "get" : {
        "tags" : [ "events" ],
        "description" : "Returns a single event if the user has access",
        "operationId" : "findEventByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Mongo ID of event to fetch",
          "required" : true,
          "type" : "string",
          "format" : "string"
        }, {
          "name" : "vestorly-auth",
          "in" : "query",
          "description" : "Vestorly Auth Token",
          "required" : true,
          "type" : "string",
          "format" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Event response",
            "schema" : {
              "$ref" : "#/definitions/Event"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "events" ],
        "description" : "Updates a single event by mongo id",
        "operationId" : "updateEventByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Mongo ID of event to update",
          "required" : true,
          "type" : "string",
          "format" : "string"
        }, {
          "name" : "vestorly-auth",
          "in" : "query",
          "description" : "Vestorly Auth Token",
          "required" : true,
          "type" : "string",
          "format" : "string"
        }, {
          "name" : "Event",
          "in" : "formData",
          "description" : "Event",
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Event response",
            "schema" : {
              "$ref" : "#/definitions/Event"
            }
          }
        }
      }
    },
    "/groups" : {
      "get" : {
        "tags" : [ "groups" ],
        "description" : "Returns all groups",
        "operationId" : "findGroups",
        "parameters" : [ {
          "name" : "vestorly-auth",
          "in" : "query",
          "description" : "Vestorly Auth Token",
          "required" : true,
          "type" : "string",
          "format" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Group response",
            "schema" : {
              "$ref" : "#/definitions/Groups"
            }
          }
        }
      }
    },
    "/groups/{id}" : {
      "get" : {
        "tags" : [ "groups" ],
        "description" : "Returns a single group if user has access",
        "operationId" : "findGroupByID",
        "parameters" : [ {
          "name" : "vestorly-auth",
          "in" : "query",
          "description" : "Vestorly Auth Token",
          "required" : true,
          "type" : "string",
          "format" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Mongo ID of group to fetch",
          "required" : true,
          "type" : "string",
          "format" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Group response",
            "schema" : {
              "$ref" : "#/definitions/Group"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "groups" ],
        "description" : "Creates a new Group",
        "operationId" : "addGroup",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "group",
          "description" : "Group to add",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Group"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "group response",
            "schema" : {
              "$ref" : "#/definitions/GroupInput"
            }
          },
          "default" : {
            "description" : "unexpected error",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "groups" ],
        "description" : "Creates a new Group",
        "operationId" : "addGroup",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "group",
          "description" : "Group to add",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Group"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "group response",
            "schema" : {
              "$ref" : "#/definitions/GroupInput"
            }
          },
          "default" : {
            "description" : "unexpected error",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "groups" ],
        "description" : "Deletes a Group",
        "operationId" : "deleteGroup",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "group",
          "description" : "Group to remove",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Group"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "group response",
            "schema" : {
              "$ref" : "#/definitions/GroupInput"
            }
          },
          "default" : {
            "description" : "unexpected error",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/member_events" : {
      "get" : {
        "tags" : [ "member_events" ],
        "description" : "Returns all MemberEvents",
        "operationId" : "findMemberEvents",
        "parameters" : [ {
          "name" : "vestorly-auth",
          "in" : "query",
          "description" : "Vestorly Auth Token",
          "required" : true,
          "type" : "string",
          "format" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Member Eventsresponse",
            "schema" : {
              "$ref" : "#/definitions/MemberEvents"
            }
          }
        }
      }
    },
    "/members" : {
      "get" : {
        "tags" : [ "members" ],
        "description" : "Returns all members",
        "operationId" : "findMembers",
        "parameters" : [ {
          "name" : "vestorly-auth",
          "in" : "query",
          "description" : "Vestorly Auth Token",
          "required" : true,
          "type" : "string",
          "format" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Member response",
            "schema" : {
              "$ref" : "#/definitions/Members"
            }
          }
        }
      }
    },
    "/members/{id}" : {
      "get" : {
        "tags" : [ "members" ],
        "description" : "Returns a single member",
        "operationId" : "findMemberByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Mongo ID of member to fetch",
          "required" : true,
          "type" : "string",
          "format" : "string"
        }, {
          "name" : "vestorly-auth",
          "in" : "query",
          "description" : "Vestorly Auth Token",
          "required" : true,
          "type" : "string",
          "format" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Member response",
            "schema" : {
              "$ref" : "#/definitions/Member"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "members" ],
        "description" : "Returns a single member",
        "operationId" : "findMemberByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Mongo ID of member to fetch",
          "required" : true,
          "type" : "string",
          "format" : "string"
        }, {
          "name" : "vestorly-auth",
          "in" : "query",
          "description" : "Vestorly Auth Token",
          "required" : true,
          "type" : "string",
          "format" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Member response",
            "schema" : {
              "$ref" : "#/definitions/Member"
            }
          }
        }
      }
    },
    "/newsletter_settings" : {
      "get" : {
        "tags" : [ "newsletter_settings" ],
        "description" : "Returns all newsletter settings",
        "operationId" : "findNewsletterSettings",
        "parameters" : [ {
          "name" : "vestorly-auth",
          "in" : "query",
          "description" : "Vestorly Auth Token",
          "required" : true,
          "type" : "string",
          "format" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "newsletter settings response",
            "schema" : {
              "$ref" : "#/definitions/NewsletterSettings"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "newsletter_settings" ],
        "description" : "Update a single newsletter setting by ID",
        "operationId" : "updateNewsletterSettingsByID",
        "parameters" : [ {
          "name" : "vestorly-auth",
          "in" : "query",
          "description" : "Vestorly Auth Token",
          "required" : true,
          "type" : "string",
          "format" : "string"
        }, {
          "name" : "newsletter_settings",
          "in" : "formData",
          "description" : "newsletter settings",
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "newsletter settings response",
            "schema" : {
              "$ref" : "#/definitions/NewsletterSettings"
            }
          }
        }
      }
    },
    "/newsletter_settings/{id}" : {
      "get" : {
        "tags" : [ "newsletter_settings" ],
        "description" : "Returns a single newsletter settings if the user has access",
        "operationId" : "findNewsletterSettingsByID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Mongo ID of newsletter settings to fetch",
          "required" : true,
          "type" : "string",
          "format" : "string"
        }, {
          "name" : "vestorly-auth",
          "in" : "query",
          "description" : "Vestorly Auth Token",
          "required" : true,
          "type" : "string",
          "format" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "newsletting setting response",
            "schema" : {
              "$ref" : "#/definitions/NewsletterSettings"
            }
          }
        }
      }
    },
    "/newsletters" : {
      "get" : {
        "tags" : [ "newsletters" ],
        "description" : "Returns all newsletters",
        "operationId" : "findNewsletters",
        "parameters" : [ {
          "name" : "vestorly-auth",
          "in" : "query",
          "description" : "Vestorly Auth Token",
          "required" : true,
          "type" : "string",
          "format" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Response",
            "schema" : {
              "$ref" : "#/definitions/Newsletters"
            }
          }
        }
      }
    },
    "/newsletters/{id}" : {
      "get" : {
        "tags" : [ "newsletters" ],
        "description" : "Returns newsletter by ID",
        "operationId" : "getNewsletterByID",
        "parameters" : [ {
          "name" : "vestorly-auth",
          "in" : "query",
          "description" : "Vestorly Auth Token",
          "required" : true,
          "type" : "string",
          "format" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of newsletter to fetch",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Response",
            "schema" : {
              "$ref" : "#/definitions/Newsletter"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "newsletters" ],
        "description" : "Update newsletter by ID",
        "operationId" : "updateNewsletter",
        "parameters" : [ {
          "name" : "vestorly-auth",
          "in" : "query",
          "description" : "Vestorly Auth Token",
          "required" : true,
          "type" : "string",
          "format" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of newsletter to fetch",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Newsletter",
          "in" : "formData",
          "description" : "Newsletter",
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Response",
            "schema" : {
              "$ref" : "#/definitions/Newsletter"
            }
          }
        }
      }
    },
    "/posts" : {
      "get" : {
        "tags" : [ "posts" ],
        "description" : "Query all posts",
        "operationId" : "findPosts",
        "parameters" : [ {
          "name" : "vestorly-auth",
          "in" : "query",
          "description" : "Vestorly Auth Token",
          "required" : true,
          "type" : "string",
          "format" : "string"
        }, {
          "name" : "filter_by",
          "in" : "query",
          "description" : "Filter post by parameters",
          "required" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "posts response",
            "schema" : {
              "$ref" : "#/definitions/Posts"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "posts" ],
        "description" : "Create a new post in the Vestorly Platform",
        "operationId" : "createPost",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "parameters" : [ {
          "name" : "vestorly-auth",
          "in" : "query",
          "description" : "Vestorly Auth Token",
          "required" : true,
          "type" : "string",
          "format" : "string"
        }, {
          "name" : "Post",
          "in" : "formData",
          "description" : "Post",
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "posts response",
            "schema" : {
              "$ref" : "#/definitions/Post"
            }
          }
        }
      }
    },
    "/posts/{id}" : {
      "get" : {
        "tags" : [ "posts" ],
        "description" : "Query all posts",
        "operationId" : "getPostByID",
        "parameters" : [ {
          "name" : "vestorly-auth",
          "in" : "query",
          "description" : "Vestorly Auth Token",
          "required" : true,
          "type" : "string",
          "format" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of post to fetch",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filter_by",
          "in" : "query",
          "description" : "Filter post by parameters",
          "required" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "post response",
            "schema" : {
              "$ref" : "#/definitions/Post"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "posts" ],
        "description" : "Update A Post",
        "operationId" : "updatePostByID",
        "parameters" : [ {
          "name" : "vestorly-auth",
          "in" : "query",
          "description" : "Vestorly Auth Token",
          "required" : true,
          "type" : "string",
          "format" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of post to fetch",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Post",
          "in" : "formData",
          "description" : "Post",
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "post response",
            "schema" : {
              "$ref" : "#/definitions/Post"
            }
          }
        }
      }
    },
    "/sessions" : {
      "post" : {
        "tags" : [ "sessions" ],
        "description" : "Login To Vestorly Platform",
        "operationId" : "login",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "formData",
          "description" : "Username in the vestorly platform",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "password",
          "in" : "formData",
          "description" : "Password in Vestorly Platform",
          "required" : true,
          "type" : "password"
        } ],
        "responses" : {
          "200" : {
            "description" : "Response",
            "schema" : {
              "$ref" : "#/definitions/Session"
            }
          }
        }
      }
    },
    "/sessions/{id}" : {
      "delete" : {
        "tags" : [ "sessions" ],
        "description" : "Logout",
        "operationId" : "logout",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "parameters" : [ {
          "name" : "vestorly-auth",
          "in" : "formData",
          "description" : "Authenication token",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Response",
            "schema" : {
              "$ref" : "#/definitions/Session"
            }
          }
        }
      }
    },
    "/sources" : {
      "get" : {
        "tags" : [ "sources" ],
        "description" : "Returns all sources",
        "operationId" : "findSources",
        "parameters" : [ {
          "name" : "vestorly-auth",
          "in" : "query",
          "description" : "Vestorly Auth Token",
          "required" : true,
          "type" : "string",
          "format" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "source response",
            "schema" : {
              "$ref" : "#/definitions/Sources"
            }
          }
        }
      }
    },
    "/sources/" : {
      "post" : {
        "tags" : [ "sources" ],
        "description" : "Create source",
        "operationId" : "createSource",
        "parameters" : [ {
          "name" : "vestorly-auth",
          "in" : "query",
          "description" : "Vestorly Auth Token",
          "required" : true,
          "type" : "string",
          "format" : "string"
        }, {
          "name" : "Source",
          "in" : "formData",
          "description" : "Source",
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "source response",
            "schema" : {
              "$ref" : "#/definitions/Source"
            }
          }
        }
      }
    },
    "/sources/{id}" : {
      "get" : {
        "tags" : [ "sources" ],
        "description" : "Get Source By ID",
        "operationId" : "getSourceByID",
        "parameters" : [ {
          "name" : "vestorly-auth",
          "in" : "query",
          "description" : "Vestorly Auth Token",
          "required" : true,
          "type" : "string",
          "format" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of source to fetch",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "source response",
            "schema" : {
              "$ref" : "#/definitions/Source"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "sources" ],
        "description" : "Update Source By ID",
        "operationId" : "UpdateSourceByID",
        "parameters" : [ {
          "name" : "vestorly-auth",
          "in" : "query",
          "description" : "Vestorly Auth Token",
          "required" : true,
          "type" : "string",
          "format" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "ID of source to fetch",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "Source",
          "in" : "formData",
          "description" : "Source",
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "source response",
            "schema" : {
              "$ref" : "#/definitions/Source"
            }
          }
        }
      }
    }
  },
  "definitions" : {
    "Source" : {
      "required" : [ "_id", "custom_rss_feed", "enabled", "logo_url", "name", "rss_publisher" ],
      "properties" : {
        "_id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "url" : {
          "type" : "string"
        },
        "logo_url" : {
          "type" : "string"
        },
        "enabled" : {
          "type" : "boolean",
          "default" : false
        },
        "custom_rss_feed" : {
          "type" : "boolean",
          "default" : false
        },
        "rss_publisher" : {
          "type" : "string"
        }
      }
    },
    "SourceInput" : {
      "required" : [ "custom_rss_feed", "enabled", "logo_url", "name", "rss_publisher" ],
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "url" : {
          "type" : "string"
        },
        "logo_url" : {
          "type" : "string"
        },
        "enabled" : {
          "type" : "boolean",
          "default" : false
        },
        "custom_rss_feed" : {
          "type" : "boolean",
          "default" : false
        },
        "rss_publisher" : {
          "type" : "string"
        }
      }
    },
    "Sources" : {
      "properties" : {
        "sources" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Source"
          }
        }
      }
    },
    "Members" : {
      "properties" : {
        "members" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Member"
          }
        }
      }
    },
    "Advisor" : {
      "properties" : {
        "new_user" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "Article" : { },
    "Articles" : {
      "properties" : {
        "articles" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Article"
          }
        }
      }
    },
    "Newsletter" : {
      "properties" : {
        "is_sent" : {
          "type" : "boolean",
          "default" : false
        },
        "is_default" : {
          "type" : "boolean",
          "default" : false
        },
        "click_count" : {
          "type" : "integer",
          "format" : "int64"
        },
        "unique_click_count" : {
          "type" : "integer",
          "format" : "int64"
        },
        "total_click_count" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "NewsletterInput" : {
      "properties" : {
        "is_sent" : {
          "type" : "boolean",
          "default" : false
        },
        "is_default" : {
          "type" : "boolean",
          "default" : false
        },
        "click_count" : {
          "type" : "integer",
          "format" : "int64"
        },
        "unique_click_count" : {
          "type" : "integer",
          "format" : "int64"
        },
        "total_click_count" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "Newsletters" : {
      "properties" : {
        "newletters" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Newsletter"
          }
        }
      }
    },
    "Posts" : {
      "properties" : {
        "posts" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Post"
          }
        }
      }
    },
    "Post" : {
      "properties" : {
        "client_only" : {
          "type" : "boolean",
          "default" : false
        },
        "img_compressed" : {
          "type" : "boolean",
          "default" : false
        },
        "img_changed" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "EventInput" : {
      "required" : [ "advisor_email", "newsletter", "original_url", "originator_group_name", "subject_email" ],
      "properties" : {
        "referrer" : {
          "type" : "string"
        },
        "original_url" : {
          "type" : "string"
        },
        "originator_email" : {
          "type" : "string"
        },
        "subject_email" : {
          "type" : "string"
        },
        "advisor_email" : {
          "type" : "string"
        },
        "originator_group_name" : {
          "type" : "string"
        },
        "newsletter" : {
          "type" : "string"
        }
      }
    },
    "Events" : {
      "properties" : {
        "events" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Event"
          }
        }
      }
    },
    "Event" : {
      "required" : [ "_id", "advisor_email", "newsletter", "original_url", "originator_group_name", "subject_email" ],
      "properties" : {
        "_id" : {
          "type" : "string"
        },
        "referrer" : {
          "type" : "string"
        },
        "original_url" : {
          "type" : "string"
        },
        "originator_email" : {
          "type" : "string"
        },
        "subject_email" : {
          "type" : "string"
        },
        "advisor_email" : {
          "type" : "string"
        },
        "originator_group_name" : {
          "type" : "string"
        },
        "newsletter" : {
          "type" : "string"
        }
      }
    },
    "Group" : {
      "required" : [ "_id" ],
      "properties" : {
        "_id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "is_default" : {
          "type" : "boolean",
          "default" : false
        },
        "is_hidden" : {
          "type" : "boolean",
          "default" : false
        },
        "new_weekly_mailer_content" : {
          "type" : "string"
        },
        "newsletter_subject" : {
          "type" : "string"
        },
        "autopublish" : {
          "type" : "boolean",
          "default" : false
        },
        "number_articles_per_group" : {
          "type" : "integer",
          "format" : "int32"
        },
        "number_articles_per_newsletter" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "GroupInput" : {
      "required" : [ "_id" ],
      "properties" : {
        "_id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "is_default" : {
          "type" : "boolean",
          "default" : false
        },
        "is_hidden" : {
          "type" : "boolean",
          "default" : false
        },
        "new_weekly_mailer_content" : {
          "type" : "string"
        },
        "newsletter_subject" : {
          "type" : "string"
        },
        "autopublish" : {
          "type" : "boolean",
          "default" : false
        },
        "number_articles_per_group" : {
          "type" : "integer",
          "format" : "int32"
        },
        "number_articles_per_newsletter" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "Groups" : {
      "properties" : {
        "groups" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Group"
          }
        }
      }
    },
    "NewsletterSettingsInput" : {
      "properties" : {
        "email_status" : {
          "type" : "string"
        },
        "twitter_status" : {
          "type" : "string"
        },
        "linkedin_status" : {
          "type" : "string"
        },
        "email_hour" : {
          "type" : "integer",
          "format" : "int32"
        },
        "twitter_hour" : {
          "type" : "integer",
          "format" : "int32"
        },
        "linkedin_hour" : {
          "type" : "integer",
          "format" : "int32"
        },
        "facebook_hour" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "NewsletterSettings" : {
      "required" : [ "_id" ],
      "properties" : {
        "_id" : {
          "type" : "string"
        },
        "email_status" : {
          "type" : "string"
        },
        "twitter_status" : {
          "type" : "string"
        },
        "linkedin_status" : {
          "type" : "string"
        },
        "email_hour" : {
          "type" : "integer",
          "format" : "int32"
        },
        "twitter_hour" : {
          "type" : "integer",
          "format" : "int32"
        },
        "linkedin_hour" : {
          "type" : "integer",
          "format" : "int32"
        },
        "facebook_hour" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    }
  }
}