<?php
/**
 *  Copyright 2015 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */
class ArticlesApi {

	function __construct($apiClient) {
	  $this->apiClient = $apiClient;
	}

  
	/**
	 * index
   *
	 * Read a list of articles
   * vestorly-auth, string: Authentication token (required)
   * * is_published, string: Filter by published articles (required)
   * * external_url_source, string: Filter by posts with external URL source (required)
   * * ids, string: Return posts with list of IDs provided (required)
   * 
	 * @return void
	 */

   public function index($vestorly-auth, $is_published, $external_url_source, $ids) {

  		// parse inputs
  		$resourcePath = "api/articles.json";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $headerParams['Accept'] = '';
      $headerParams['Content-Type'] = '';

      // query params
      if($vestorly-auth !== null) {
  		  $queryParams['vestorly-auth'] = $this->apiClient->toQueryValue($vestorly-auth);
  		}// query params
      if($is_published !== null) {
  		  $queryParams['is_published'] = $this->apiClient->toQueryValue($is_published);
  		}// query params
      if($external_url_source !== null) {
  		  $queryParams['external_url_source'] = $this->apiClient->toQueryValue($external_url_source);
  		}// query params
      if($ids !== null) {
  		  $queryParams['ids'] = $this->apiClient->toQueryValue($ids);
  		}
      
      
      
      

      $body = $body ?: $formParams;

      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
        $body = http_build_query($body);
      }

  		// make the API Call
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);

      if(! $response) {
        return null;
      }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'void');
  		return $responseObject;
  }
  
	/**
	 * show
   *
	 * Read a specific article
   * vestorly-auth, string: Authentication token (required)
   * * id, string: Id of article (required)
   * 
	 * @return void
	 */

   public function show($vestorly-auth, $id) {

  		// parse inputs
  		$resourcePath = "api/articles/{id}.json";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $headerParams['Accept'] = '';
      $headerParams['Content-Type'] = '';

      // query params
      if($vestorly-auth !== null) {
  		  $queryParams['vestorly-auth'] = $this->apiClient->toQueryValue($vestorly-auth);
  		}
      
      // path params
      if($id !== null) {
  			$resourcePath = str_replace("{" . "id" . "}",
  			                            $this->apiClient->toPathValue($id), $resourcePath);
  		}
      
      

      $body = $body ?: $formParams;

      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
        $body = http_build_query($body);
      }

  		// make the API Call
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);

      if(! $response) {
        return null;
      }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'void');
  		return $responseObject;
  }
  
	/**
	 * update
   *
	 * Update an article
   * vestorly-auth, string: Authentication token (required)
   * * article, string: JSON block of article data (required)
   * 
	 * @return void
	 */

   public function update($vestorly-auth, $article) {

  		// parse inputs
  		$resourcePath = "api/articles/{id}.json";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "PUT";
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $headerParams['Accept'] = '';
      $headerParams['Content-Type'] = '';

      // query params
      if($vestorly-auth !== null) {
  		  $queryParams['vestorly-auth'] = $this->apiClient->toQueryValue($vestorly-auth);
  		}
      
      
      
      if ($article !== null) {
        $formParams[article] = $article;
      }
      

      $body = $body ?: $formParams;

      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
        $body = http_build_query($body);
      }

  		// make the API Call
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);

      if(! $response) {
        return null;
      }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'void');
  		return $responseObject;
  }
  

}
