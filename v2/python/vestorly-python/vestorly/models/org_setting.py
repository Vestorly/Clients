# coding: utf-8

"""
    Vestorly API

    Vestorly Developers API

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class OrgSetting(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, is_default=None, name=None, email_theme_name=None, company_address=None, company_contact_email=None, site_url=None, company_homepage_url=None, privacy_policy_url=None, terms_and_conditions_url=None):
        """
        OrgSetting - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'is_default': 'bool',
            'name': 'str',
            'email_theme_name': 'str',
            'company_address': 'str',
            'company_contact_email': 'str',
            'site_url': 'str',
            'company_homepage_url': 'str',
            'privacy_policy_url': 'str',
            'terms_and_conditions_url': 'str'
        }

        self.attribute_map = {
            'id': '_id',
            'is_default': 'is_default',
            'name': 'name',
            'email_theme_name': 'email_theme_name',
            'company_address': 'company_address',
            'company_contact_email': 'company_contact_email',
            'site_url': 'site_url',
            'company_homepage_url': 'company_homepage_url',
            'privacy_policy_url': 'privacy_policy_url',
            'terms_and_conditions_url': 'terms_and_conditions_url'
        }

        self._id = id
        self._is_default = is_default
        self._name = name
        self._email_theme_name = email_theme_name
        self._company_address = company_address
        self._company_contact_email = company_contact_email
        self._site_url = site_url
        self._company_homepage_url = company_homepage_url
        self._privacy_policy_url = privacy_policy_url
        self._terms_and_conditions_url = terms_and_conditions_url

    @property
    def id(self):
        """
        Gets the id of this OrgSetting.

        :return: The id of this OrgSetting.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this OrgSetting.

        :param id: The id of this OrgSetting.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_default(self):
        """
        Gets the is_default of this OrgSetting.

        :return: The is_default of this OrgSetting.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """
        Sets the is_default of this OrgSetting.

        :param is_default: The is_default of this OrgSetting.
        :type: bool
        """

        self._is_default = is_default

    @property
    def name(self):
        """
        Gets the name of this OrgSetting.

        :return: The name of this OrgSetting.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this OrgSetting.

        :param name: The name of this OrgSetting.
        :type: str
        """

        self._name = name

    @property
    def email_theme_name(self):
        """
        Gets the email_theme_name of this OrgSetting.

        :return: The email_theme_name of this OrgSetting.
        :rtype: str
        """
        return self._email_theme_name

    @email_theme_name.setter
    def email_theme_name(self, email_theme_name):
        """
        Sets the email_theme_name of this OrgSetting.

        :param email_theme_name: The email_theme_name of this OrgSetting.
        :type: str
        """

        self._email_theme_name = email_theme_name

    @property
    def company_address(self):
        """
        Gets the company_address of this OrgSetting.

        :return: The company_address of this OrgSetting.
        :rtype: str
        """
        return self._company_address

    @company_address.setter
    def company_address(self, company_address):
        """
        Sets the company_address of this OrgSetting.

        :param company_address: The company_address of this OrgSetting.
        :type: str
        """

        self._company_address = company_address

    @property
    def company_contact_email(self):
        """
        Gets the company_contact_email of this OrgSetting.

        :return: The company_contact_email of this OrgSetting.
        :rtype: str
        """
        return self._company_contact_email

    @company_contact_email.setter
    def company_contact_email(self, company_contact_email):
        """
        Sets the company_contact_email of this OrgSetting.

        :param company_contact_email: The company_contact_email of this OrgSetting.
        :type: str
        """

        self._company_contact_email = company_contact_email

    @property
    def site_url(self):
        """
        Gets the site_url of this OrgSetting.

        :return: The site_url of this OrgSetting.
        :rtype: str
        """
        return self._site_url

    @site_url.setter
    def site_url(self, site_url):
        """
        Sets the site_url of this OrgSetting.

        :param site_url: The site_url of this OrgSetting.
        :type: str
        """

        self._site_url = site_url

    @property
    def company_homepage_url(self):
        """
        Gets the company_homepage_url of this OrgSetting.

        :return: The company_homepage_url of this OrgSetting.
        :rtype: str
        """
        return self._company_homepage_url

    @company_homepage_url.setter
    def company_homepage_url(self, company_homepage_url):
        """
        Sets the company_homepage_url of this OrgSetting.

        :param company_homepage_url: The company_homepage_url of this OrgSetting.
        :type: str
        """

        self._company_homepage_url = company_homepage_url

    @property
    def privacy_policy_url(self):
        """
        Gets the privacy_policy_url of this OrgSetting.

        :return: The privacy_policy_url of this OrgSetting.
        :rtype: str
        """
        return self._privacy_policy_url

    @privacy_policy_url.setter
    def privacy_policy_url(self, privacy_policy_url):
        """
        Sets the privacy_policy_url of this OrgSetting.

        :param privacy_policy_url: The privacy_policy_url of this OrgSetting.
        :type: str
        """

        self._privacy_policy_url = privacy_policy_url

    @property
    def terms_and_conditions_url(self):
        """
        Gets the terms_and_conditions_url of this OrgSetting.

        :return: The terms_and_conditions_url of this OrgSetting.
        :rtype: str
        """
        return self._terms_and_conditions_url

    @terms_and_conditions_url.setter
    def terms_and_conditions_url(self, terms_and_conditions_url):
        """
        Sets the terms_and_conditions_url of this OrgSetting.

        :param terms_and_conditions_url: The terms_and_conditions_url of this OrgSetting.
        :type: str
        """

        self._terms_and_conditions_url = terms_and_conditions_url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, OrgSetting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
