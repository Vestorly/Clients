# coding: utf-8

"""
    Vestorly API

    Vestorly Developers API

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Article(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, created_at=None, title=None, body=None, is_responsive=None, is_proxy_needed=None, is_mobile_proxy_needed=None, needs_sanitize=None, proxy_url=None, topic=None, suitability_score=None, summary=None, image_path=None, image_url=None, image_height=None, image_width=None, logo_url=None, square_logo_url=None, url=None, external_url=None, external_url_source=None, external_url_type=None):
        """
        Article - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'created_at': 'str',
            'title': 'str',
            'body': 'str',
            'is_responsive': 'bool',
            'is_proxy_needed': 'bool',
            'is_mobile_proxy_needed': 'bool',
            'needs_sanitize': 'bool',
            'proxy_url': 'str',
            'topic': 'str',
            'suitability_score': 'str',
            'summary': 'str',
            'image_path': 'str',
            'image_url': 'str',
            'image_height': 'int',
            'image_width': 'int',
            'logo_url': 'str',
            'square_logo_url': 'str',
            'url': 'str',
            'external_url': 'str',
            'external_url_source': 'str',
            'external_url_type': 'str'
        }

        self.attribute_map = {
            'id': '_id',
            'created_at': 'created_at',
            'title': 'title',
            'body': 'body',
            'is_responsive': 'is_responsive',
            'is_proxy_needed': 'is_proxy_needed',
            'is_mobile_proxy_needed': 'is_mobile_proxy_needed',
            'needs_sanitize': 'needs_sanitize',
            'proxy_url': 'proxy_url',
            'topic': 'topic',
            'suitability_score': 'suitability_score',
            'summary': 'summary',
            'image_path': 'image_path',
            'image_url': 'image_url',
            'image_height': 'image_height',
            'image_width': 'image_width',
            'logo_url': 'logo_url',
            'square_logo_url': 'square_logo_url',
            'url': 'url',
            'external_url': 'external_url',
            'external_url_source': 'external_url_source',
            'external_url_type': 'external_url_type'
        }

        self._id = id
        self._created_at = created_at
        self._title = title
        self._body = body
        self._is_responsive = is_responsive
        self._is_proxy_needed = is_proxy_needed
        self._is_mobile_proxy_needed = is_mobile_proxy_needed
        self._needs_sanitize = needs_sanitize
        self._proxy_url = proxy_url
        self._topic = topic
        self._suitability_score = suitability_score
        self._summary = summary
        self._image_path = image_path
        self._image_url = image_url
        self._image_height = image_height
        self._image_width = image_width
        self._logo_url = logo_url
        self._square_logo_url = square_logo_url
        self._url = url
        self._external_url = external_url
        self._external_url_source = external_url_source
        self._external_url_type = external_url_type

    @property
    def id(self):
        """
        Gets the id of this Article.

        :return: The id of this Article.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Article.

        :param id: The id of this Article.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def created_at(self):
        """
        Gets the created_at of this Article.

        :return: The created_at of this Article.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Article.

        :param created_at: The created_at of this Article.
        :type: str
        """

        self._created_at = created_at

    @property
    def title(self):
        """
        Gets the title of this Article.

        :return: The title of this Article.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this Article.

        :param title: The title of this Article.
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def body(self):
        """
        Gets the body of this Article.

        :return: The body of this Article.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """
        Sets the body of this Article.

        :param body: The body of this Article.
        :type: str
        """

        self._body = body

    @property
    def is_responsive(self):
        """
        Gets the is_responsive of this Article.

        :return: The is_responsive of this Article.
        :rtype: bool
        """
        return self._is_responsive

    @is_responsive.setter
    def is_responsive(self, is_responsive):
        """
        Sets the is_responsive of this Article.

        :param is_responsive: The is_responsive of this Article.
        :type: bool
        """

        self._is_responsive = is_responsive

    @property
    def is_proxy_needed(self):
        """
        Gets the is_proxy_needed of this Article.

        :return: The is_proxy_needed of this Article.
        :rtype: bool
        """
        return self._is_proxy_needed

    @is_proxy_needed.setter
    def is_proxy_needed(self, is_proxy_needed):
        """
        Sets the is_proxy_needed of this Article.

        :param is_proxy_needed: The is_proxy_needed of this Article.
        :type: bool
        """

        self._is_proxy_needed = is_proxy_needed

    @property
    def is_mobile_proxy_needed(self):
        """
        Gets the is_mobile_proxy_needed of this Article.

        :return: The is_mobile_proxy_needed of this Article.
        :rtype: bool
        """
        return self._is_mobile_proxy_needed

    @is_mobile_proxy_needed.setter
    def is_mobile_proxy_needed(self, is_mobile_proxy_needed):
        """
        Sets the is_mobile_proxy_needed of this Article.

        :param is_mobile_proxy_needed: The is_mobile_proxy_needed of this Article.
        :type: bool
        """

        self._is_mobile_proxy_needed = is_mobile_proxy_needed

    @property
    def needs_sanitize(self):
        """
        Gets the needs_sanitize of this Article.

        :return: The needs_sanitize of this Article.
        :rtype: bool
        """
        return self._needs_sanitize

    @needs_sanitize.setter
    def needs_sanitize(self, needs_sanitize):
        """
        Sets the needs_sanitize of this Article.

        :param needs_sanitize: The needs_sanitize of this Article.
        :type: bool
        """

        self._needs_sanitize = needs_sanitize

    @property
    def proxy_url(self):
        """
        Gets the proxy_url of this Article.

        :return: The proxy_url of this Article.
        :rtype: str
        """
        return self._proxy_url

    @proxy_url.setter
    def proxy_url(self, proxy_url):
        """
        Sets the proxy_url of this Article.

        :param proxy_url: The proxy_url of this Article.
        :type: str
        """

        self._proxy_url = proxy_url

    @property
    def topic(self):
        """
        Gets the topic of this Article.

        :return: The topic of this Article.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """
        Sets the topic of this Article.

        :param topic: The topic of this Article.
        :type: str
        """

        self._topic = topic

    @property
    def suitability_score(self):
        """
        Gets the suitability_score of this Article.

        :return: The suitability_score of this Article.
        :rtype: str
        """
        return self._suitability_score

    @suitability_score.setter
    def suitability_score(self, suitability_score):
        """
        Sets the suitability_score of this Article.

        :param suitability_score: The suitability_score of this Article.
        :type: str
        """

        self._suitability_score = suitability_score

    @property
    def summary(self):
        """
        Gets the summary of this Article.

        :return: The summary of this Article.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """
        Sets the summary of this Article.

        :param summary: The summary of this Article.
        :type: str
        """

        self._summary = summary

    @property
    def image_path(self):
        """
        Gets the image_path of this Article.

        :return: The image_path of this Article.
        :rtype: str
        """
        return self._image_path

    @image_path.setter
    def image_path(self, image_path):
        """
        Sets the image_path of this Article.

        :param image_path: The image_path of this Article.
        :type: str
        """

        self._image_path = image_path

    @property
    def image_url(self):
        """
        Gets the image_url of this Article.

        :return: The image_url of this Article.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """
        Sets the image_url of this Article.

        :param image_url: The image_url of this Article.
        :type: str
        """

        self._image_url = image_url

    @property
    def image_height(self):
        """
        Gets the image_height of this Article.

        :return: The image_height of this Article.
        :rtype: int
        """
        return self._image_height

    @image_height.setter
    def image_height(self, image_height):
        """
        Sets the image_height of this Article.

        :param image_height: The image_height of this Article.
        :type: int
        """

        self._image_height = image_height

    @property
    def image_width(self):
        """
        Gets the image_width of this Article.

        :return: The image_width of this Article.
        :rtype: int
        """
        return self._image_width

    @image_width.setter
    def image_width(self, image_width):
        """
        Sets the image_width of this Article.

        :param image_width: The image_width of this Article.
        :type: int
        """

        self._image_width = image_width

    @property
    def logo_url(self):
        """
        Gets the logo_url of this Article.

        :return: The logo_url of this Article.
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """
        Sets the logo_url of this Article.

        :param logo_url: The logo_url of this Article.
        :type: str
        """

        self._logo_url = logo_url

    @property
    def square_logo_url(self):
        """
        Gets the square_logo_url of this Article.

        :return: The square_logo_url of this Article.
        :rtype: str
        """
        return self._square_logo_url

    @square_logo_url.setter
    def square_logo_url(self, square_logo_url):
        """
        Sets the square_logo_url of this Article.

        :param square_logo_url: The square_logo_url of this Article.
        :type: str
        """

        self._square_logo_url = square_logo_url

    @property
    def url(self):
        """
        Gets the url of this Article.

        :return: The url of this Article.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this Article.

        :param url: The url of this Article.
        :type: str
        """

        self._url = url

    @property
    def external_url(self):
        """
        Gets the external_url of this Article.

        :return: The external_url of this Article.
        :rtype: str
        """
        return self._external_url

    @external_url.setter
    def external_url(self, external_url):
        """
        Sets the external_url of this Article.

        :param external_url: The external_url of this Article.
        :type: str
        """

        self._external_url = external_url

    @property
    def external_url_source(self):
        """
        Gets the external_url_source of this Article.

        :return: The external_url_source of this Article.
        :rtype: str
        """
        return self._external_url_source

    @external_url_source.setter
    def external_url_source(self, external_url_source):
        """
        Sets the external_url_source of this Article.

        :param external_url_source: The external_url_source of this Article.
        :type: str
        """

        self._external_url_source = external_url_source

    @property
    def external_url_type(self):
        """
        Gets the external_url_type of this Article.

        :return: The external_url_type of this Article.
        :rtype: str
        """
        return self._external_url_type

    @external_url_type.setter
    def external_url_type(self, external_url_type):
        """
        Sets the external_url_type of this Article.

        :param external_url_type: The external_url_type of this Article.
        :type: str
        """

        self._external_url_type = external_url_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Article):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
