# coding: utf-8

"""
    Vestorly API

    Vestorly Developers API

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MemberEvent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, created_at=None, type=None, source=None, referer=None, original_url=None, originator_email=None, originator_name=None, parent_originator_id=None, parent_event_id=None, originator_type=None, originator_group_id=None, event_type=None, event_source=None, content_url=None, event_date=None, username=None, member_id=None, originator_id=None, subject_id=None):
        """
        MemberEvent - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'created_at': 'str',
            'type': 'str',
            'source': 'str',
            'referer': 'str',
            'original_url': 'str',
            'originator_email': 'str',
            'originator_name': 'str',
            'parent_originator_id': 'str',
            'parent_event_id': 'str',
            'originator_type': 'str',
            'originator_group_id': 'str',
            'event_type': 'str',
            'event_source': 'str',
            'content_url': 'str',
            'event_date': 'str',
            'username': 'str',
            'member_id': 'str',
            'originator_id': 'str',
            'subject_id': 'str'
        }

        self.attribute_map = {
            'id': '_id',
            'created_at': 'created_at',
            'type': 'type',
            'source': 'source',
            'referer': 'referer',
            'original_url': 'original_url',
            'originator_email': 'originator_email',
            'originator_name': 'originator_name',
            'parent_originator_id': 'parent_originator_id',
            'parent_event_id': 'parent_event_id',
            'originator_type': 'originator_type',
            'originator_group_id': 'originator_group_id',
            'event_type': 'event_type',
            'event_source': 'event_source',
            'content_url': 'content_url',
            'event_date': 'event_date',
            'username': 'username',
            'member_id': 'member_id',
            'originator_id': 'originator_id',
            'subject_id': 'subject_id'
        }

        self._id = id
        self._created_at = created_at
        self._type = type
        self._source = source
        self._referer = referer
        self._original_url = original_url
        self._originator_email = originator_email
        self._originator_name = originator_name
        self._parent_originator_id = parent_originator_id
        self._parent_event_id = parent_event_id
        self._originator_type = originator_type
        self._originator_group_id = originator_group_id
        self._event_type = event_type
        self._event_source = event_source
        self._content_url = content_url
        self._event_date = event_date
        self._username = username
        self._member_id = member_id
        self._originator_id = originator_id
        self._subject_id = subject_id

    @property
    def id(self):
        """
        Gets the id of this MemberEvent.

        :return: The id of this MemberEvent.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this MemberEvent.

        :param id: The id of this MemberEvent.
        :type: str
        """

        self._id = id

    @property
    def created_at(self):
        """
        Gets the created_at of this MemberEvent.

        :return: The created_at of this MemberEvent.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this MemberEvent.

        :param created_at: The created_at of this MemberEvent.
        :type: str
        """

        self._created_at = created_at

    @property
    def type(self):
        """
        Gets the type of this MemberEvent.

        :return: The type of this MemberEvent.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this MemberEvent.

        :param type: The type of this MemberEvent.
        :type: str
        """

        self._type = type

    @property
    def source(self):
        """
        Gets the source of this MemberEvent.

        :return: The source of this MemberEvent.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this MemberEvent.

        :param source: The source of this MemberEvent.
        :type: str
        """

        self._source = source

    @property
    def referer(self):
        """
        Gets the referer of this MemberEvent.

        :return: The referer of this MemberEvent.
        :rtype: str
        """
        return self._referer

    @referer.setter
    def referer(self, referer):
        """
        Sets the referer of this MemberEvent.

        :param referer: The referer of this MemberEvent.
        :type: str
        """

        self._referer = referer

    @property
    def original_url(self):
        """
        Gets the original_url of this MemberEvent.

        :return: The original_url of this MemberEvent.
        :rtype: str
        """
        return self._original_url

    @original_url.setter
    def original_url(self, original_url):
        """
        Sets the original_url of this MemberEvent.

        :param original_url: The original_url of this MemberEvent.
        :type: str
        """

        self._original_url = original_url

    @property
    def originator_email(self):
        """
        Gets the originator_email of this MemberEvent.

        :return: The originator_email of this MemberEvent.
        :rtype: str
        """
        return self._originator_email

    @originator_email.setter
    def originator_email(self, originator_email):
        """
        Sets the originator_email of this MemberEvent.

        :param originator_email: The originator_email of this MemberEvent.
        :type: str
        """

        self._originator_email = originator_email

    @property
    def originator_name(self):
        """
        Gets the originator_name of this MemberEvent.

        :return: The originator_name of this MemberEvent.
        :rtype: str
        """
        return self._originator_name

    @originator_name.setter
    def originator_name(self, originator_name):
        """
        Sets the originator_name of this MemberEvent.

        :param originator_name: The originator_name of this MemberEvent.
        :type: str
        """

        self._originator_name = originator_name

    @property
    def parent_originator_id(self):
        """
        Gets the parent_originator_id of this MemberEvent.

        :return: The parent_originator_id of this MemberEvent.
        :rtype: str
        """
        return self._parent_originator_id

    @parent_originator_id.setter
    def parent_originator_id(self, parent_originator_id):
        """
        Sets the parent_originator_id of this MemberEvent.

        :param parent_originator_id: The parent_originator_id of this MemberEvent.
        :type: str
        """

        self._parent_originator_id = parent_originator_id

    @property
    def parent_event_id(self):
        """
        Gets the parent_event_id of this MemberEvent.

        :return: The parent_event_id of this MemberEvent.
        :rtype: str
        """
        return self._parent_event_id

    @parent_event_id.setter
    def parent_event_id(self, parent_event_id):
        """
        Sets the parent_event_id of this MemberEvent.

        :param parent_event_id: The parent_event_id of this MemberEvent.
        :type: str
        """

        self._parent_event_id = parent_event_id

    @property
    def originator_type(self):
        """
        Gets the originator_type of this MemberEvent.

        :return: The originator_type of this MemberEvent.
        :rtype: str
        """
        return self._originator_type

    @originator_type.setter
    def originator_type(self, originator_type):
        """
        Sets the originator_type of this MemberEvent.

        :param originator_type: The originator_type of this MemberEvent.
        :type: str
        """

        self._originator_type = originator_type

    @property
    def originator_group_id(self):
        """
        Gets the originator_group_id of this MemberEvent.

        :return: The originator_group_id of this MemberEvent.
        :rtype: str
        """
        return self._originator_group_id

    @originator_group_id.setter
    def originator_group_id(self, originator_group_id):
        """
        Sets the originator_group_id of this MemberEvent.

        :param originator_group_id: The originator_group_id of this MemberEvent.
        :type: str
        """

        self._originator_group_id = originator_group_id

    @property
    def event_type(self):
        """
        Gets the event_type of this MemberEvent.

        :return: The event_type of this MemberEvent.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """
        Sets the event_type of this MemberEvent.

        :param event_type: The event_type of this MemberEvent.
        :type: str
        """

        self._event_type = event_type

    @property
    def event_source(self):
        """
        Gets the event_source of this MemberEvent.

        :return: The event_source of this MemberEvent.
        :rtype: str
        """
        return self._event_source

    @event_source.setter
    def event_source(self, event_source):
        """
        Sets the event_source of this MemberEvent.

        :param event_source: The event_source of this MemberEvent.
        :type: str
        """

        self._event_source = event_source

    @property
    def content_url(self):
        """
        Gets the content_url of this MemberEvent.

        :return: The content_url of this MemberEvent.
        :rtype: str
        """
        return self._content_url

    @content_url.setter
    def content_url(self, content_url):
        """
        Sets the content_url of this MemberEvent.

        :param content_url: The content_url of this MemberEvent.
        :type: str
        """

        self._content_url = content_url

    @property
    def event_date(self):
        """
        Gets the event_date of this MemberEvent.

        :return: The event_date of this MemberEvent.
        :rtype: str
        """
        return self._event_date

    @event_date.setter
    def event_date(self, event_date):
        """
        Sets the event_date of this MemberEvent.

        :param event_date: The event_date of this MemberEvent.
        :type: str
        """

        self._event_date = event_date

    @property
    def username(self):
        """
        Gets the username of this MemberEvent.

        :return: The username of this MemberEvent.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this MemberEvent.

        :param username: The username of this MemberEvent.
        :type: str
        """

        self._username = username

    @property
    def member_id(self):
        """
        Gets the member_id of this MemberEvent.

        :return: The member_id of this MemberEvent.
        :rtype: str
        """
        return self._member_id

    @member_id.setter
    def member_id(self, member_id):
        """
        Sets the member_id of this MemberEvent.

        :param member_id: The member_id of this MemberEvent.
        :type: str
        """

        self._member_id = member_id

    @property
    def originator_id(self):
        """
        Gets the originator_id of this MemberEvent.

        :return: The originator_id of this MemberEvent.
        :rtype: str
        """
        return self._originator_id

    @originator_id.setter
    def originator_id(self, originator_id):
        """
        Sets the originator_id of this MemberEvent.

        :param originator_id: The originator_id of this MemberEvent.
        :type: str
        """

        self._originator_id = originator_id

    @property
    def subject_id(self):
        """
        Gets the subject_id of this MemberEvent.

        :return: The subject_id of this MemberEvent.
        :rtype: str
        """
        return self._subject_id

    @subject_id.setter
    def subject_id(self, subject_id):
        """
        Sets the subject_id of this MemberEvent.

        :param subject_id: The subject_id of this MemberEvent.
        :type: str
        """

        self._subject_id = subject_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MemberEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
