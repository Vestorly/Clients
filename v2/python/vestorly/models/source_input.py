# coding: utf-8

"""
    Vestorly API

    Vestorly Developers API

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SourceInput(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, url=None, logo_url=None, enabled=None, custom_rss_feed=None, rss_publisher=None):
        """
        SourceInput - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'url': 'str',
            'logo_url': 'str',
            'enabled': 'bool',
            'custom_rss_feed': 'bool',
            'rss_publisher': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'url': 'url',
            'logo_url': 'logo_url',
            'enabled': 'enabled',
            'custom_rss_feed': 'custom_rss_feed',
            'rss_publisher': 'rss_publisher'
        }

        self._name = name
        self._url = url
        self._logo_url = logo_url
        self._enabled = enabled
        self._custom_rss_feed = custom_rss_feed
        self._rss_publisher = rss_publisher

    @property
    def name(self):
        """
        Gets the name of this SourceInput.

        :return: The name of this SourceInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this SourceInput.

        :param name: The name of this SourceInput.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def url(self):
        """
        Gets the url of this SourceInput.

        :return: The url of this SourceInput.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this SourceInput.

        :param url: The url of this SourceInput.
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def logo_url(self):
        """
        Gets the logo_url of this SourceInput.

        :return: The logo_url of this SourceInput.
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """
        Sets the logo_url of this SourceInput.

        :param logo_url: The logo_url of this SourceInput.
        :type: str
        """

        self._logo_url = logo_url

    @property
    def enabled(self):
        """
        Gets the enabled of this SourceInput.

        :return: The enabled of this SourceInput.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this SourceInput.

        :param enabled: The enabled of this SourceInput.
        :type: bool
        """

        self._enabled = enabled

    @property
    def custom_rss_feed(self):
        """
        Gets the custom_rss_feed of this SourceInput.

        :return: The custom_rss_feed of this SourceInput.
        :rtype: bool
        """
        return self._custom_rss_feed

    @custom_rss_feed.setter
    def custom_rss_feed(self, custom_rss_feed):
        """
        Sets the custom_rss_feed of this SourceInput.

        :param custom_rss_feed: The custom_rss_feed of this SourceInput.
        :type: bool
        """

        self._custom_rss_feed = custom_rss_feed

    @property
    def rss_publisher(self):
        """
        Gets the rss_publisher of this SourceInput.

        :return: The rss_publisher of this SourceInput.
        :rtype: str
        """
        return self._rss_publisher

    @rss_publisher.setter
    def rss_publisher(self, rss_publisher):
        """
        Sets the rss_publisher of this SourceInput.

        :param rss_publisher: The rss_publisher of this SourceInput.
        :type: str
        """
        if rss_publisher is None:
            raise ValueError("Invalid value for `rss_publisher`, must not be `None`")

        self._rss_publisher = rss_publisher

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SourceInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
