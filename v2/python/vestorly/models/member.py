# coding: utf-8

"""
    Vestorly API

    Vestorly Developers API

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Member(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, email=None, first_name=None, last_name=None, phone=None, address=None, city=None, state=None, zip=None, gender=None, interest_consultation=None, interest_in_new_advisor=None, assets=None, age=None, data_estimated=None, education=None, high_net_worth=None, home_market_value=None, home_owner_status=None, household_income=None, marital_status=None, occupation=None, hometown=None, family=None, tags=None, subscribed_group_ids=None, unsubscribed=None, unsubscribed_date=None, user_type=None, signed_up_with=None, message=None, location=None, picture_url=None, profile_url=None, estimated_location=None, estimated_zip=None, register_ip_addr=None, genuine_email=None, last_active_date=None, is_client=None, is_hidden=None, invited_on=None, invited_by=None, portfolio_size=None):
        """
        Member - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'email': 'str',
            'first_name': 'str',
            'last_name': 'str',
            'phone': 'str',
            'address': 'str',
            'city': 'str',
            'state': 'str',
            'zip': 'str',
            'gender': 'str',
            'interest_consultation': 'str',
            'interest_in_new_advisor': 'str',
            'assets': 'str',
            'age': 'str',
            'data_estimated': 'bool',
            'education': 'str',
            'high_net_worth': 'bool',
            'home_market_value': 'str',
            'home_owner_status': 'str',
            'household_income': 'str',
            'marital_status': 'str',
            'occupation': 'str',
            'hometown': 'str',
            'family': 'str',
            'tags': 'list[str]',
            'subscribed_group_ids': 'list[str]',
            'unsubscribed': 'bool',
            'unsubscribed_date': 'bool',
            'user_type': 'str',
            'signed_up_with': 'str',
            'message': 'str',
            'location': 'str',
            'picture_url': 'str',
            'profile_url': 'str',
            'estimated_location': 'str',
            'estimated_zip': 'str',
            'register_ip_addr': 'str',
            'genuine_email': 'bool',
            'last_active_date': 'str',
            'is_client': 'bool',
            'is_hidden': 'bool',
            'invited_on': 'str',
            'invited_by': 'str',
            'portfolio_size': 'str'
        }

        self.attribute_map = {
            'id': '_id',
            'email': 'email',
            'first_name': 'first_name',
            'last_name': 'last_name',
            'phone': 'phone',
            'address': 'address',
            'city': 'city',
            'state': 'state',
            'zip': 'zip',
            'gender': 'gender',
            'interest_consultation': 'interest_consultation',
            'interest_in_new_advisor': 'interest_in_new_advisor',
            'assets': 'assets',
            'age': 'age',
            'data_estimated': 'data_estimated',
            'education': 'education',
            'high_net_worth': 'high_net_worth',
            'home_market_value': 'home_market_value',
            'home_owner_status': 'home_owner_status',
            'household_income': 'household_income',
            'marital_status': 'marital_status',
            'occupation': 'occupation',
            'hometown': 'hometown',
            'family': 'family',
            'tags': 'tags',
            'subscribed_group_ids': 'subscribed_group_ids',
            'unsubscribed': 'unsubscribed',
            'unsubscribed_date': 'unsubscribed_date',
            'user_type': 'user_type',
            'signed_up_with': 'signed_up_with',
            'message': 'message',
            'location': 'location',
            'picture_url': 'picture_url',
            'profile_url': 'profile_url',
            'estimated_location': 'estimated_location',
            'estimated_zip': 'estimated_zip',
            'register_ip_addr': 'register_ip_addr',
            'genuine_email': 'genuine_email',
            'last_active_date': 'last_active_date',
            'is_client': 'is_client',
            'is_hidden': 'is_hidden',
            'invited_on': 'invited_on',
            'invited_by': 'invited_by',
            'portfolio_size': 'portfolio_size'
        }

        self._id = id
        self._email = email
        self._first_name = first_name
        self._last_name = last_name
        self._phone = phone
        self._address = address
        self._city = city
        self._state = state
        self._zip = zip
        self._gender = gender
        self._interest_consultation = interest_consultation
        self._interest_in_new_advisor = interest_in_new_advisor
        self._assets = assets
        self._age = age
        self._data_estimated = data_estimated
        self._education = education
        self._high_net_worth = high_net_worth
        self._home_market_value = home_market_value
        self._home_owner_status = home_owner_status
        self._household_income = household_income
        self._marital_status = marital_status
        self._occupation = occupation
        self._hometown = hometown
        self._family = family
        self._tags = tags
        self._subscribed_group_ids = subscribed_group_ids
        self._unsubscribed = unsubscribed
        self._unsubscribed_date = unsubscribed_date
        self._user_type = user_type
        self._signed_up_with = signed_up_with
        self._message = message
        self._location = location
        self._picture_url = picture_url
        self._profile_url = profile_url
        self._estimated_location = estimated_location
        self._estimated_zip = estimated_zip
        self._register_ip_addr = register_ip_addr
        self._genuine_email = genuine_email
        self._last_active_date = last_active_date
        self._is_client = is_client
        self._is_hidden = is_hidden
        self._invited_on = invited_on
        self._invited_by = invited_by
        self._portfolio_size = portfolio_size

    @property
    def id(self):
        """
        Gets the id of this Member.

        :return: The id of this Member.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Member.

        :param id: The id of this Member.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def email(self):
        """
        Gets the email of this Member.

        :return: The email of this Member.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this Member.

        :param email: The email of this Member.
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def first_name(self):
        """
        Gets the first_name of this Member.

        :return: The first_name of this Member.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this Member.

        :param first_name: The first_name of this Member.
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """
        Gets the last_name of this Member.

        :return: The last_name of this Member.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this Member.

        :param last_name: The last_name of this Member.
        :type: str
        """

        self._last_name = last_name

    @property
    def phone(self):
        """
        Gets the phone of this Member.

        :return: The phone of this Member.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """
        Sets the phone of this Member.

        :param phone: The phone of this Member.
        :type: str
        """

        self._phone = phone

    @property
    def address(self):
        """
        Gets the address of this Member.

        :return: The address of this Member.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this Member.

        :param address: The address of this Member.
        :type: str
        """

        self._address = address

    @property
    def city(self):
        """
        Gets the city of this Member.

        :return: The city of this Member.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this Member.

        :param city: The city of this Member.
        :type: str
        """

        self._city = city

    @property
    def state(self):
        """
        Gets the state of this Member.

        :return: The state of this Member.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this Member.

        :param state: The state of this Member.
        :type: str
        """

        self._state = state

    @property
    def zip(self):
        """
        Gets the zip of this Member.

        :return: The zip of this Member.
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """
        Sets the zip of this Member.

        :param zip: The zip of this Member.
        :type: str
        """

        self._zip = zip

    @property
    def gender(self):
        """
        Gets the gender of this Member.

        :return: The gender of this Member.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """
        Sets the gender of this Member.

        :param gender: The gender of this Member.
        :type: str
        """

        self._gender = gender

    @property
    def interest_consultation(self):
        """
        Gets the interest_consultation of this Member.

        :return: The interest_consultation of this Member.
        :rtype: str
        """
        return self._interest_consultation

    @interest_consultation.setter
    def interest_consultation(self, interest_consultation):
        """
        Sets the interest_consultation of this Member.

        :param interest_consultation: The interest_consultation of this Member.
        :type: str
        """

        self._interest_consultation = interest_consultation

    @property
    def interest_in_new_advisor(self):
        """
        Gets the interest_in_new_advisor of this Member.

        :return: The interest_in_new_advisor of this Member.
        :rtype: str
        """
        return self._interest_in_new_advisor

    @interest_in_new_advisor.setter
    def interest_in_new_advisor(self, interest_in_new_advisor):
        """
        Sets the interest_in_new_advisor of this Member.

        :param interest_in_new_advisor: The interest_in_new_advisor of this Member.
        :type: str
        """

        self._interest_in_new_advisor = interest_in_new_advisor

    @property
    def assets(self):
        """
        Gets the assets of this Member.

        :return: The assets of this Member.
        :rtype: str
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """
        Sets the assets of this Member.

        :param assets: The assets of this Member.
        :type: str
        """

        self._assets = assets

    @property
    def age(self):
        """
        Gets the age of this Member.

        :return: The age of this Member.
        :rtype: str
        """
        return self._age

    @age.setter
    def age(self, age):
        """
        Sets the age of this Member.

        :param age: The age of this Member.
        :type: str
        """

        self._age = age

    @property
    def data_estimated(self):
        """
        Gets the data_estimated of this Member.

        :return: The data_estimated of this Member.
        :rtype: bool
        """
        return self._data_estimated

    @data_estimated.setter
    def data_estimated(self, data_estimated):
        """
        Sets the data_estimated of this Member.

        :param data_estimated: The data_estimated of this Member.
        :type: bool
        """

        self._data_estimated = data_estimated

    @property
    def education(self):
        """
        Gets the education of this Member.

        :return: The education of this Member.
        :rtype: str
        """
        return self._education

    @education.setter
    def education(self, education):
        """
        Sets the education of this Member.

        :param education: The education of this Member.
        :type: str
        """

        self._education = education

    @property
    def high_net_worth(self):
        """
        Gets the high_net_worth of this Member.

        :return: The high_net_worth of this Member.
        :rtype: bool
        """
        return self._high_net_worth

    @high_net_worth.setter
    def high_net_worth(self, high_net_worth):
        """
        Sets the high_net_worth of this Member.

        :param high_net_worth: The high_net_worth of this Member.
        :type: bool
        """

        self._high_net_worth = high_net_worth

    @property
    def home_market_value(self):
        """
        Gets the home_market_value of this Member.

        :return: The home_market_value of this Member.
        :rtype: str
        """
        return self._home_market_value

    @home_market_value.setter
    def home_market_value(self, home_market_value):
        """
        Sets the home_market_value of this Member.

        :param home_market_value: The home_market_value of this Member.
        :type: str
        """

        self._home_market_value = home_market_value

    @property
    def home_owner_status(self):
        """
        Gets the home_owner_status of this Member.

        :return: The home_owner_status of this Member.
        :rtype: str
        """
        return self._home_owner_status

    @home_owner_status.setter
    def home_owner_status(self, home_owner_status):
        """
        Sets the home_owner_status of this Member.

        :param home_owner_status: The home_owner_status of this Member.
        :type: str
        """

        self._home_owner_status = home_owner_status

    @property
    def household_income(self):
        """
        Gets the household_income of this Member.

        :return: The household_income of this Member.
        :rtype: str
        """
        return self._household_income

    @household_income.setter
    def household_income(self, household_income):
        """
        Sets the household_income of this Member.

        :param household_income: The household_income of this Member.
        :type: str
        """

        self._household_income = household_income

    @property
    def marital_status(self):
        """
        Gets the marital_status of this Member.

        :return: The marital_status of this Member.
        :rtype: str
        """
        return self._marital_status

    @marital_status.setter
    def marital_status(self, marital_status):
        """
        Sets the marital_status of this Member.

        :param marital_status: The marital_status of this Member.
        :type: str
        """

        self._marital_status = marital_status

    @property
    def occupation(self):
        """
        Gets the occupation of this Member.

        :return: The occupation of this Member.
        :rtype: str
        """
        return self._occupation

    @occupation.setter
    def occupation(self, occupation):
        """
        Sets the occupation of this Member.

        :param occupation: The occupation of this Member.
        :type: str
        """

        self._occupation = occupation

    @property
    def hometown(self):
        """
        Gets the hometown of this Member.

        :return: The hometown of this Member.
        :rtype: str
        """
        return self._hometown

    @hometown.setter
    def hometown(self, hometown):
        """
        Sets the hometown of this Member.

        :param hometown: The hometown of this Member.
        :type: str
        """

        self._hometown = hometown

    @property
    def family(self):
        """
        Gets the family of this Member.

        :return: The family of this Member.
        :rtype: str
        """
        return self._family

    @family.setter
    def family(self, family):
        """
        Sets the family of this Member.

        :param family: The family of this Member.
        :type: str
        """

        self._family = family

    @property
    def tags(self):
        """
        Gets the tags of this Member.

        :return: The tags of this Member.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this Member.

        :param tags: The tags of this Member.
        :type: list[str]
        """

        self._tags = tags

    @property
    def subscribed_group_ids(self):
        """
        Gets the subscribed_group_ids of this Member.

        :return: The subscribed_group_ids of this Member.
        :rtype: list[str]
        """
        return self._subscribed_group_ids

    @subscribed_group_ids.setter
    def subscribed_group_ids(self, subscribed_group_ids):
        """
        Sets the subscribed_group_ids of this Member.

        :param subscribed_group_ids: The subscribed_group_ids of this Member.
        :type: list[str]
        """

        self._subscribed_group_ids = subscribed_group_ids

    @property
    def unsubscribed(self):
        """
        Gets the unsubscribed of this Member.

        :return: The unsubscribed of this Member.
        :rtype: bool
        """
        return self._unsubscribed

    @unsubscribed.setter
    def unsubscribed(self, unsubscribed):
        """
        Sets the unsubscribed of this Member.

        :param unsubscribed: The unsubscribed of this Member.
        :type: bool
        """

        self._unsubscribed = unsubscribed

    @property
    def unsubscribed_date(self):
        """
        Gets the unsubscribed_date of this Member.

        :return: The unsubscribed_date of this Member.
        :rtype: bool
        """
        return self._unsubscribed_date

    @unsubscribed_date.setter
    def unsubscribed_date(self, unsubscribed_date):
        """
        Sets the unsubscribed_date of this Member.

        :param unsubscribed_date: The unsubscribed_date of this Member.
        :type: bool
        """

        self._unsubscribed_date = unsubscribed_date

    @property
    def user_type(self):
        """
        Gets the user_type of this Member.

        :return: The user_type of this Member.
        :rtype: str
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """
        Sets the user_type of this Member.

        :param user_type: The user_type of this Member.
        :type: str
        """

        self._user_type = user_type

    @property
    def signed_up_with(self):
        """
        Gets the signed_up_with of this Member.

        :return: The signed_up_with of this Member.
        :rtype: str
        """
        return self._signed_up_with

    @signed_up_with.setter
    def signed_up_with(self, signed_up_with):
        """
        Sets the signed_up_with of this Member.

        :param signed_up_with: The signed_up_with of this Member.
        :type: str
        """

        self._signed_up_with = signed_up_with

    @property
    def message(self):
        """
        Gets the message of this Member.

        :return: The message of this Member.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this Member.

        :param message: The message of this Member.
        :type: str
        """

        self._message = message

    @property
    def location(self):
        """
        Gets the location of this Member.

        :return: The location of this Member.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this Member.

        :param location: The location of this Member.
        :type: str
        """

        self._location = location

    @property
    def picture_url(self):
        """
        Gets the picture_url of this Member.

        :return: The picture_url of this Member.
        :rtype: str
        """
        return self._picture_url

    @picture_url.setter
    def picture_url(self, picture_url):
        """
        Sets the picture_url of this Member.

        :param picture_url: The picture_url of this Member.
        :type: str
        """

        self._picture_url = picture_url

    @property
    def profile_url(self):
        """
        Gets the profile_url of this Member.

        :return: The profile_url of this Member.
        :rtype: str
        """
        return self._profile_url

    @profile_url.setter
    def profile_url(self, profile_url):
        """
        Sets the profile_url of this Member.

        :param profile_url: The profile_url of this Member.
        :type: str
        """

        self._profile_url = profile_url

    @property
    def estimated_location(self):
        """
        Gets the estimated_location of this Member.

        :return: The estimated_location of this Member.
        :rtype: str
        """
        return self._estimated_location

    @estimated_location.setter
    def estimated_location(self, estimated_location):
        """
        Sets the estimated_location of this Member.

        :param estimated_location: The estimated_location of this Member.
        :type: str
        """

        self._estimated_location = estimated_location

    @property
    def estimated_zip(self):
        """
        Gets the estimated_zip of this Member.

        :return: The estimated_zip of this Member.
        :rtype: str
        """
        return self._estimated_zip

    @estimated_zip.setter
    def estimated_zip(self, estimated_zip):
        """
        Sets the estimated_zip of this Member.

        :param estimated_zip: The estimated_zip of this Member.
        :type: str
        """

        self._estimated_zip = estimated_zip

    @property
    def register_ip_addr(self):
        """
        Gets the register_ip_addr of this Member.

        :return: The register_ip_addr of this Member.
        :rtype: str
        """
        return self._register_ip_addr

    @register_ip_addr.setter
    def register_ip_addr(self, register_ip_addr):
        """
        Sets the register_ip_addr of this Member.

        :param register_ip_addr: The register_ip_addr of this Member.
        :type: str
        """

        self._register_ip_addr = register_ip_addr

    @property
    def genuine_email(self):
        """
        Gets the genuine_email of this Member.

        :return: The genuine_email of this Member.
        :rtype: bool
        """
        return self._genuine_email

    @genuine_email.setter
    def genuine_email(self, genuine_email):
        """
        Sets the genuine_email of this Member.

        :param genuine_email: The genuine_email of this Member.
        :type: bool
        """

        self._genuine_email = genuine_email

    @property
    def last_active_date(self):
        """
        Gets the last_active_date of this Member.

        :return: The last_active_date of this Member.
        :rtype: str
        """
        return self._last_active_date

    @last_active_date.setter
    def last_active_date(self, last_active_date):
        """
        Sets the last_active_date of this Member.

        :param last_active_date: The last_active_date of this Member.
        :type: str
        """

        self._last_active_date = last_active_date

    @property
    def is_client(self):
        """
        Gets the is_client of this Member.

        :return: The is_client of this Member.
        :rtype: bool
        """
        return self._is_client

    @is_client.setter
    def is_client(self, is_client):
        """
        Sets the is_client of this Member.

        :param is_client: The is_client of this Member.
        :type: bool
        """

        self._is_client = is_client

    @property
    def is_hidden(self):
        """
        Gets the is_hidden of this Member.

        :return: The is_hidden of this Member.
        :rtype: bool
        """
        return self._is_hidden

    @is_hidden.setter
    def is_hidden(self, is_hidden):
        """
        Sets the is_hidden of this Member.

        :param is_hidden: The is_hidden of this Member.
        :type: bool
        """

        self._is_hidden = is_hidden

    @property
    def invited_on(self):
        """
        Gets the invited_on of this Member.

        :return: The invited_on of this Member.
        :rtype: str
        """
        return self._invited_on

    @invited_on.setter
    def invited_on(self, invited_on):
        """
        Sets the invited_on of this Member.

        :param invited_on: The invited_on of this Member.
        :type: str
        """

        self._invited_on = invited_on

    @property
    def invited_by(self):
        """
        Gets the invited_by of this Member.

        :return: The invited_by of this Member.
        :rtype: str
        """
        return self._invited_by

    @invited_by.setter
    def invited_by(self, invited_by):
        """
        Sets the invited_by of this Member.

        :param invited_by: The invited_by of this Member.
        :type: str
        """

        self._invited_by = invited_by

    @property
    def portfolio_size(self):
        """
        Gets the portfolio_size of this Member.

        :return: The portfolio_size of this Member.
        :rtype: str
        """
        return self._portfolio_size

    @portfolio_size.setter
    def portfolio_size(self, portfolio_size):
        """
        Sets the portfolio_size of this Member.

        :param portfolio_size: The portfolio_size of this Member.
        :type: str
        """

        self._portfolio_size = portfolio_size

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Member):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
