# coding: utf-8

"""
    Vestorly API

    Vestorly Developers API

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EventContent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, content_field=None, content_id=None, content_type=None, created_at=None, slug=None, updated_at=None):
        """
        EventContent - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'content_field': 'str',
            'content_id': 'str',
            'content_type': 'str',
            'created_at': 'str',
            'slug': 'str',
            'updated_at': 'str'
        }

        self.attribute_map = {
            'id': '_id',
            'content_field': 'content_field',
            'content_id': 'content_id',
            'content_type': 'content_type',
            'created_at': 'created_at',
            'slug': 'slug',
            'updated_at': 'updated_at'
        }

        self._id = id
        self._content_field = content_field
        self._content_id = content_id
        self._content_type = content_type
        self._created_at = created_at
        self._slug = slug
        self._updated_at = updated_at

    @property
    def id(self):
        """
        Gets the id of this EventContent.
        Mongo id of event

        :return: The id of this EventContent.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this EventContent.
        Mongo id of event

        :param id: The id of this EventContent.
        :type: str
        """

        self._id = id

    @property
    def content_field(self):
        """
        Gets the content_field of this EventContent.

        :return: The content_field of this EventContent.
        :rtype: str
        """
        return self._content_field

    @content_field.setter
    def content_field(self, content_field):
        """
        Sets the content_field of this EventContent.

        :param content_field: The content_field of this EventContent.
        :type: str
        """

        self._content_field = content_field

    @property
    def content_id(self):
        """
        Gets the content_id of this EventContent.

        :return: The content_id of this EventContent.
        :rtype: str
        """
        return self._content_id

    @content_id.setter
    def content_id(self, content_id):
        """
        Sets the content_id of this EventContent.

        :param content_id: The content_id of this EventContent.
        :type: str
        """

        self._content_id = content_id

    @property
    def content_type(self):
        """
        Gets the content_type of this EventContent.

        :return: The content_type of this EventContent.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """
        Sets the content_type of this EventContent.

        :param content_type: The content_type of this EventContent.
        :type: str
        """

        self._content_type = content_type

    @property
    def created_at(self):
        """
        Gets the created_at of this EventContent.

        :return: The created_at of this EventContent.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this EventContent.

        :param created_at: The created_at of this EventContent.
        :type: str
        """

        self._created_at = created_at

    @property
    def slug(self):
        """
        Gets the slug of this EventContent.

        :return: The slug of this EventContent.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """
        Sets the slug of this EventContent.

        :param slug: The slug of this EventContent.
        :type: str
        """

        self._slug = slug

    @property
    def updated_at(self):
        """
        Gets the updated_at of this EventContent.

        :return: The updated_at of this EventContent.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this EventContent.

        :param updated_at: The updated_at of this EventContent.
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EventContent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
