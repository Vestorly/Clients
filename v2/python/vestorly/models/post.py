# coding: utf-8

"""
    Vestorly API

    Vestorly Developers API

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Post(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, created_at=None, updated_at=None, external_url=None, external_url_source=None, external_url_type=None, image_path=None, image_url=None, image_height=None, image_width=None, logo_url=None, square_logo_url=None, needs_sanitize=None, summary=None, topic=None, approval_status=None, approval_transactions=None, group_ids=None, slug=None, article_id=None, comment=None, newsletter_ids=None, is_featured=None, advisor_id=None, is_published=None, is_responsive=None, is_proxy_needed=None, is_mobile_proxy_needed=None, proxy_url=None, video=None, pdf_attachment_url=None, post_date=None, display_date=None, suitability_score=None, video_id=None, display_tag=None, display_summary=None, vestorly_url=None, title=None):
        """
        Post - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'created_at': 'str',
            'updated_at': 'str',
            'external_url': 'str',
            'external_url_source': 'str',
            'external_url_type': 'str',
            'image_path': 'str',
            'image_url': 'str',
            'image_height': 'str',
            'image_width': 'str',
            'logo_url': 'str',
            'square_logo_url': 'str',
            'needs_sanitize': 'str',
            'summary': 'str',
            'topic': 'str',
            'approval_status': 'str',
            'approval_transactions': 'list[str]',
            'group_ids': 'list[str]',
            'slug': 'str',
            'article_id': 'str',
            'comment': 'str',
            'newsletter_ids': 'list[str]',
            'is_featured': 'bool',
            'advisor_id': 'str',
            'is_published': 'bool',
            'is_responsive': 'bool',
            'is_proxy_needed': 'bool',
            'is_mobile_proxy_needed': 'bool',
            'proxy_url': 'str',
            'video': 'str',
            'pdf_attachment_url': 'str',
            'post_date': 'str',
            'display_date': 'str',
            'suitability_score': 'str',
            'video_id': 'str',
            'display_tag': 'str',
            'display_summary': 'str',
            'vestorly_url': 'str',
            'title': 'str'
        }

        self.attribute_map = {
            'id': '_id',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'external_url': 'external_url',
            'external_url_source': 'external_url_source',
            'external_url_type': 'external_url_type',
            'image_path': 'image_path',
            'image_url': 'image_url',
            'image_height': 'image_height',
            'image_width': 'image_width',
            'logo_url': 'logo_url',
            'square_logo_url': 'square_logo_url',
            'needs_sanitize': 'needs_sanitize',
            'summary': 'summary',
            'topic': 'topic',
            'approval_status': 'approval_status',
            'approval_transactions': 'approval_transactions',
            'group_ids': 'group_ids',
            'slug': 'slug',
            'article_id': 'article_id',
            'comment': 'comment',
            'newsletter_ids': 'newsletter_ids',
            'is_featured': 'is_featured',
            'advisor_id': 'advisor_id',
            'is_published': 'is_published',
            'is_responsive': 'is_responsive',
            'is_proxy_needed': 'is_proxy_needed',
            'is_mobile_proxy_needed': 'is_mobile_proxy_needed',
            'proxy_url': 'proxy_url',
            'video': 'video',
            'pdf_attachment_url': 'pdf_attachment_url',
            'post_date': 'post_date',
            'display_date': 'display_date',
            'suitability_score': 'suitability_score',
            'video_id': 'video_id',
            'display_tag': 'display_tag',
            'display_summary': 'display_summary',
            'vestorly_url': 'vestorly_url',
            'title': 'title'
        }

        self._id = id
        self._created_at = created_at
        self._updated_at = updated_at
        self._external_url = external_url
        self._external_url_source = external_url_source
        self._external_url_type = external_url_type
        self._image_path = image_path
        self._image_url = image_url
        self._image_height = image_height
        self._image_width = image_width
        self._logo_url = logo_url
        self._square_logo_url = square_logo_url
        self._needs_sanitize = needs_sanitize
        self._summary = summary
        self._topic = topic
        self._approval_status = approval_status
        self._approval_transactions = approval_transactions
        self._group_ids = group_ids
        self._slug = slug
        self._article_id = article_id
        self._comment = comment
        self._newsletter_ids = newsletter_ids
        self._is_featured = is_featured
        self._advisor_id = advisor_id
        self._is_published = is_published
        self._is_responsive = is_responsive
        self._is_proxy_needed = is_proxy_needed
        self._is_mobile_proxy_needed = is_mobile_proxy_needed
        self._proxy_url = proxy_url
        self._video = video
        self._pdf_attachment_url = pdf_attachment_url
        self._post_date = post_date
        self._display_date = display_date
        self._suitability_score = suitability_score
        self._video_id = video_id
        self._display_tag = display_tag
        self._display_summary = display_summary
        self._vestorly_url = vestorly_url
        self._title = title

    @property
    def id(self):
        """
        Gets the id of this Post.

        :return: The id of this Post.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Post.

        :param id: The id of this Post.
        :type: str
        """

        self._id = id

    @property
    def created_at(self):
        """
        Gets the created_at of this Post.

        :return: The created_at of this Post.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Post.

        :param created_at: The created_at of this Post.
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this Post.

        :return: The updated_at of this Post.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this Post.

        :param updated_at: The updated_at of this Post.
        :type: str
        """

        self._updated_at = updated_at

    @property
    def external_url(self):
        """
        Gets the external_url of this Post.

        :return: The external_url of this Post.
        :rtype: str
        """
        return self._external_url

    @external_url.setter
    def external_url(self, external_url):
        """
        Sets the external_url of this Post.

        :param external_url: The external_url of this Post.
        :type: str
        """

        self._external_url = external_url

    @property
    def external_url_source(self):
        """
        Gets the external_url_source of this Post.

        :return: The external_url_source of this Post.
        :rtype: str
        """
        return self._external_url_source

    @external_url_source.setter
    def external_url_source(self, external_url_source):
        """
        Sets the external_url_source of this Post.

        :param external_url_source: The external_url_source of this Post.
        :type: str
        """

        self._external_url_source = external_url_source

    @property
    def external_url_type(self):
        """
        Gets the external_url_type of this Post.

        :return: The external_url_type of this Post.
        :rtype: str
        """
        return self._external_url_type

    @external_url_type.setter
    def external_url_type(self, external_url_type):
        """
        Sets the external_url_type of this Post.

        :param external_url_type: The external_url_type of this Post.
        :type: str
        """

        self._external_url_type = external_url_type

    @property
    def image_path(self):
        """
        Gets the image_path of this Post.

        :return: The image_path of this Post.
        :rtype: str
        """
        return self._image_path

    @image_path.setter
    def image_path(self, image_path):
        """
        Sets the image_path of this Post.

        :param image_path: The image_path of this Post.
        :type: str
        """

        self._image_path = image_path

    @property
    def image_url(self):
        """
        Gets the image_url of this Post.

        :return: The image_url of this Post.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """
        Sets the image_url of this Post.

        :param image_url: The image_url of this Post.
        :type: str
        """

        self._image_url = image_url

    @property
    def image_height(self):
        """
        Gets the image_height of this Post.

        :return: The image_height of this Post.
        :rtype: str
        """
        return self._image_height

    @image_height.setter
    def image_height(self, image_height):
        """
        Sets the image_height of this Post.

        :param image_height: The image_height of this Post.
        :type: str
        """

        self._image_height = image_height

    @property
    def image_width(self):
        """
        Gets the image_width of this Post.

        :return: The image_width of this Post.
        :rtype: str
        """
        return self._image_width

    @image_width.setter
    def image_width(self, image_width):
        """
        Sets the image_width of this Post.

        :param image_width: The image_width of this Post.
        :type: str
        """

        self._image_width = image_width

    @property
    def logo_url(self):
        """
        Gets the logo_url of this Post.

        :return: The logo_url of this Post.
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """
        Sets the logo_url of this Post.

        :param logo_url: The logo_url of this Post.
        :type: str
        """

        self._logo_url = logo_url

    @property
    def square_logo_url(self):
        """
        Gets the square_logo_url of this Post.

        :return: The square_logo_url of this Post.
        :rtype: str
        """
        return self._square_logo_url

    @square_logo_url.setter
    def square_logo_url(self, square_logo_url):
        """
        Sets the square_logo_url of this Post.

        :param square_logo_url: The square_logo_url of this Post.
        :type: str
        """

        self._square_logo_url = square_logo_url

    @property
    def needs_sanitize(self):
        """
        Gets the needs_sanitize of this Post.

        :return: The needs_sanitize of this Post.
        :rtype: str
        """
        return self._needs_sanitize

    @needs_sanitize.setter
    def needs_sanitize(self, needs_sanitize):
        """
        Sets the needs_sanitize of this Post.

        :param needs_sanitize: The needs_sanitize of this Post.
        :type: str
        """

        self._needs_sanitize = needs_sanitize

    @property
    def summary(self):
        """
        Gets the summary of this Post.

        :return: The summary of this Post.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """
        Sets the summary of this Post.

        :param summary: The summary of this Post.
        :type: str
        """

        self._summary = summary

    @property
    def topic(self):
        """
        Gets the topic of this Post.

        :return: The topic of this Post.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """
        Sets the topic of this Post.

        :param topic: The topic of this Post.
        :type: str
        """

        self._topic = topic

    @property
    def approval_status(self):
        """
        Gets the approval_status of this Post.

        :return: The approval_status of this Post.
        :rtype: str
        """
        return self._approval_status

    @approval_status.setter
    def approval_status(self, approval_status):
        """
        Sets the approval_status of this Post.

        :param approval_status: The approval_status of this Post.
        :type: str
        """

        self._approval_status = approval_status

    @property
    def approval_transactions(self):
        """
        Gets the approval_transactions of this Post.

        :return: The approval_transactions of this Post.
        :rtype: list[str]
        """
        return self._approval_transactions

    @approval_transactions.setter
    def approval_transactions(self, approval_transactions):
        """
        Sets the approval_transactions of this Post.

        :param approval_transactions: The approval_transactions of this Post.
        :type: list[str]
        """

        self._approval_transactions = approval_transactions

    @property
    def group_ids(self):
        """
        Gets the group_ids of this Post.

        :return: The group_ids of this Post.
        :rtype: list[str]
        """
        return self._group_ids

    @group_ids.setter
    def group_ids(self, group_ids):
        """
        Sets the group_ids of this Post.

        :param group_ids: The group_ids of this Post.
        :type: list[str]
        """

        self._group_ids = group_ids

    @property
    def slug(self):
        """
        Gets the slug of this Post.

        :return: The slug of this Post.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """
        Sets the slug of this Post.

        :param slug: The slug of this Post.
        :type: str
        """

        self._slug = slug

    @property
    def article_id(self):
        """
        Gets the article_id of this Post.

        :return: The article_id of this Post.
        :rtype: str
        """
        return self._article_id

    @article_id.setter
    def article_id(self, article_id):
        """
        Sets the article_id of this Post.

        :param article_id: The article_id of this Post.
        :type: str
        """

        self._article_id = article_id

    @property
    def comment(self):
        """
        Gets the comment of this Post.

        :return: The comment of this Post.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """
        Sets the comment of this Post.

        :param comment: The comment of this Post.
        :type: str
        """

        self._comment = comment

    @property
    def newsletter_ids(self):
        """
        Gets the newsletter_ids of this Post.

        :return: The newsletter_ids of this Post.
        :rtype: list[str]
        """
        return self._newsletter_ids

    @newsletter_ids.setter
    def newsletter_ids(self, newsletter_ids):
        """
        Sets the newsletter_ids of this Post.

        :param newsletter_ids: The newsletter_ids of this Post.
        :type: list[str]
        """

        self._newsletter_ids = newsletter_ids

    @property
    def is_featured(self):
        """
        Gets the is_featured of this Post.

        :return: The is_featured of this Post.
        :rtype: bool
        """
        return self._is_featured

    @is_featured.setter
    def is_featured(self, is_featured):
        """
        Sets the is_featured of this Post.

        :param is_featured: The is_featured of this Post.
        :type: bool
        """

        self._is_featured = is_featured

    @property
    def advisor_id(self):
        """
        Gets the advisor_id of this Post.

        :return: The advisor_id of this Post.
        :rtype: str
        """
        return self._advisor_id

    @advisor_id.setter
    def advisor_id(self, advisor_id):
        """
        Sets the advisor_id of this Post.

        :param advisor_id: The advisor_id of this Post.
        :type: str
        """

        self._advisor_id = advisor_id

    @property
    def is_published(self):
        """
        Gets the is_published of this Post.

        :return: The is_published of this Post.
        :rtype: bool
        """
        return self._is_published

    @is_published.setter
    def is_published(self, is_published):
        """
        Sets the is_published of this Post.

        :param is_published: The is_published of this Post.
        :type: bool
        """

        self._is_published = is_published

    @property
    def is_responsive(self):
        """
        Gets the is_responsive of this Post.

        :return: The is_responsive of this Post.
        :rtype: bool
        """
        return self._is_responsive

    @is_responsive.setter
    def is_responsive(self, is_responsive):
        """
        Sets the is_responsive of this Post.

        :param is_responsive: The is_responsive of this Post.
        :type: bool
        """

        self._is_responsive = is_responsive

    @property
    def is_proxy_needed(self):
        """
        Gets the is_proxy_needed of this Post.

        :return: The is_proxy_needed of this Post.
        :rtype: bool
        """
        return self._is_proxy_needed

    @is_proxy_needed.setter
    def is_proxy_needed(self, is_proxy_needed):
        """
        Sets the is_proxy_needed of this Post.

        :param is_proxy_needed: The is_proxy_needed of this Post.
        :type: bool
        """

        self._is_proxy_needed = is_proxy_needed

    @property
    def is_mobile_proxy_needed(self):
        """
        Gets the is_mobile_proxy_needed of this Post.

        :return: The is_mobile_proxy_needed of this Post.
        :rtype: bool
        """
        return self._is_mobile_proxy_needed

    @is_mobile_proxy_needed.setter
    def is_mobile_proxy_needed(self, is_mobile_proxy_needed):
        """
        Sets the is_mobile_proxy_needed of this Post.

        :param is_mobile_proxy_needed: The is_mobile_proxy_needed of this Post.
        :type: bool
        """

        self._is_mobile_proxy_needed = is_mobile_proxy_needed

    @property
    def proxy_url(self):
        """
        Gets the proxy_url of this Post.

        :return: The proxy_url of this Post.
        :rtype: str
        """
        return self._proxy_url

    @proxy_url.setter
    def proxy_url(self, proxy_url):
        """
        Sets the proxy_url of this Post.

        :param proxy_url: The proxy_url of this Post.
        :type: str
        """

        self._proxy_url = proxy_url

    @property
    def video(self):
        """
        Gets the video of this Post.

        :return: The video of this Post.
        :rtype: str
        """
        return self._video

    @video.setter
    def video(self, video):
        """
        Sets the video of this Post.

        :param video: The video of this Post.
        :type: str
        """

        self._video = video

    @property
    def pdf_attachment_url(self):
        """
        Gets the pdf_attachment_url of this Post.

        :return: The pdf_attachment_url of this Post.
        :rtype: str
        """
        return self._pdf_attachment_url

    @pdf_attachment_url.setter
    def pdf_attachment_url(self, pdf_attachment_url):
        """
        Sets the pdf_attachment_url of this Post.

        :param pdf_attachment_url: The pdf_attachment_url of this Post.
        :type: str
        """

        self._pdf_attachment_url = pdf_attachment_url

    @property
    def post_date(self):
        """
        Gets the post_date of this Post.

        :return: The post_date of this Post.
        :rtype: str
        """
        return self._post_date

    @post_date.setter
    def post_date(self, post_date):
        """
        Sets the post_date of this Post.

        :param post_date: The post_date of this Post.
        :type: str
        """

        self._post_date = post_date

    @property
    def display_date(self):
        """
        Gets the display_date of this Post.

        :return: The display_date of this Post.
        :rtype: str
        """
        return self._display_date

    @display_date.setter
    def display_date(self, display_date):
        """
        Sets the display_date of this Post.

        :param display_date: The display_date of this Post.
        :type: str
        """

        self._display_date = display_date

    @property
    def suitability_score(self):
        """
        Gets the suitability_score of this Post.

        :return: The suitability_score of this Post.
        :rtype: str
        """
        return self._suitability_score

    @suitability_score.setter
    def suitability_score(self, suitability_score):
        """
        Sets the suitability_score of this Post.

        :param suitability_score: The suitability_score of this Post.
        :type: str
        """

        self._suitability_score = suitability_score

    @property
    def video_id(self):
        """
        Gets the video_id of this Post.

        :return: The video_id of this Post.
        :rtype: str
        """
        return self._video_id

    @video_id.setter
    def video_id(self, video_id):
        """
        Sets the video_id of this Post.

        :param video_id: The video_id of this Post.
        :type: str
        """

        self._video_id = video_id

    @property
    def display_tag(self):
        """
        Gets the display_tag of this Post.

        :return: The display_tag of this Post.
        :rtype: str
        """
        return self._display_tag

    @display_tag.setter
    def display_tag(self, display_tag):
        """
        Sets the display_tag of this Post.

        :param display_tag: The display_tag of this Post.
        :type: str
        """

        self._display_tag = display_tag

    @property
    def display_summary(self):
        """
        Gets the display_summary of this Post.

        :return: The display_summary of this Post.
        :rtype: str
        """
        return self._display_summary

    @display_summary.setter
    def display_summary(self, display_summary):
        """
        Sets the display_summary of this Post.

        :param display_summary: The display_summary of this Post.
        :type: str
        """

        self._display_summary = display_summary

    @property
    def vestorly_url(self):
        """
        Gets the vestorly_url of this Post.

        :return: The vestorly_url of this Post.
        :rtype: str
        """
        return self._vestorly_url

    @vestorly_url.setter
    def vestorly_url(self, vestorly_url):
        """
        Sets the vestorly_url of this Post.

        :param vestorly_url: The vestorly_url of this Post.
        :type: str
        """

        self._vestorly_url = vestorly_url

    @property
    def title(self):
        """
        Gets the title of this Post.

        :return: The title of this Post.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this Post.

        :param title: The title of this Post.
        :type: str
        """

        self._title = title

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Post):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
