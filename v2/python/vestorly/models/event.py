# coding: utf-8

"""
    Vestorly API

    Vestorly Developers API

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Event(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, type=None, referer=None, original_url=None, originator_email=None, subject_email=None, parent_event_id=None, originator_id=None, advisor_id=None, subject_id=None, event_content=None, created_at=None):
        """
        Event - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'type': 'str',
            'referer': 'str',
            'original_url': 'str',
            'originator_email': 'str',
            'subject_email': 'str',
            'parent_event_id': 'str',
            'originator_id': 'str',
            'advisor_id': 'str',
            'subject_id': 'str',
            'event_content': 'EventContent',
            'created_at': 'str'
        }

        self.attribute_map = {
            'id': '_id',
            'type': 'type',
            'referer': 'referer',
            'original_url': 'original_url',
            'originator_email': 'originator_email',
            'subject_email': 'subject_email',
            'parent_event_id': 'parent_event_id',
            'originator_id': 'originator_id',
            'advisor_id': 'advisor_id',
            'subject_id': 'subject_id',
            'event_content': 'event_content',
            'created_at': 'created_at'
        }

        self._id = id
        self._type = type
        self._referer = referer
        self._original_url = original_url
        self._originator_email = originator_email
        self._subject_email = subject_email
        self._parent_event_id = parent_event_id
        self._originator_id = originator_id
        self._advisor_id = advisor_id
        self._subject_id = subject_id
        self._event_content = event_content
        self._created_at = created_at

    @property
    def id(self):
        """
        Gets the id of this Event.

        :return: The id of this Event.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Event.

        :param id: The id of this Event.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def type(self):
        """
        Gets the type of this Event.

        :return: The type of this Event.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Event.

        :param type: The type of this Event.
        :type: str
        """
        allowed_values = ["page_view", "sign_up", "sign_in", "content_posted", "create_post", "publish_post", "update_post", "delete_post", "unpublish_post", "invite", "publish_newsletter", "publish_social", "click", "delivered", "open", "dropped", "bounce"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def referer(self):
        """
        Gets the referer of this Event.

        :return: The referer of this Event.
        :rtype: str
        """
        return self._referer

    @referer.setter
    def referer(self, referer):
        """
        Sets the referer of this Event.

        :param referer: The referer of this Event.
        :type: str
        """

        self._referer = referer

    @property
    def original_url(self):
        """
        Gets the original_url of this Event.

        :return: The original_url of this Event.
        :rtype: str
        """
        return self._original_url

    @original_url.setter
    def original_url(self, original_url):
        """
        Sets the original_url of this Event.

        :param original_url: The original_url of this Event.
        :type: str
        """
        if original_url is None:
            raise ValueError("Invalid value for `original_url`, must not be `None`")

        self._original_url = original_url

    @property
    def originator_email(self):
        """
        Gets the originator_email of this Event.

        :return: The originator_email of this Event.
        :rtype: str
        """
        return self._originator_email

    @originator_email.setter
    def originator_email(self, originator_email):
        """
        Sets the originator_email of this Event.

        :param originator_email: The originator_email of this Event.
        :type: str
        """

        self._originator_email = originator_email

    @property
    def subject_email(self):
        """
        Gets the subject_email of this Event.

        :return: The subject_email of this Event.
        :rtype: str
        """
        return self._subject_email

    @subject_email.setter
    def subject_email(self, subject_email):
        """
        Sets the subject_email of this Event.

        :param subject_email: The subject_email of this Event.
        :type: str
        """
        if subject_email is None:
            raise ValueError("Invalid value for `subject_email`, must not be `None`")

        self._subject_email = subject_email

    @property
    def parent_event_id(self):
        """
        Gets the parent_event_id of this Event.

        :return: The parent_event_id of this Event.
        :rtype: str
        """
        return self._parent_event_id

    @parent_event_id.setter
    def parent_event_id(self, parent_event_id):
        """
        Sets the parent_event_id of this Event.

        :param parent_event_id: The parent_event_id of this Event.
        :type: str
        """

        self._parent_event_id = parent_event_id

    @property
    def originator_id(self):
        """
        Gets the originator_id of this Event.

        :return: The originator_id of this Event.
        :rtype: str
        """
        return self._originator_id

    @originator_id.setter
    def originator_id(self, originator_id):
        """
        Sets the originator_id of this Event.

        :param originator_id: The originator_id of this Event.
        :type: str
        """

        self._originator_id = originator_id

    @property
    def advisor_id(self):
        """
        Gets the advisor_id of this Event.

        :return: The advisor_id of this Event.
        :rtype: str
        """
        return self._advisor_id

    @advisor_id.setter
    def advisor_id(self, advisor_id):
        """
        Sets the advisor_id of this Event.

        :param advisor_id: The advisor_id of this Event.
        :type: str
        """

        self._advisor_id = advisor_id

    @property
    def subject_id(self):
        """
        Gets the subject_id of this Event.

        :return: The subject_id of this Event.
        :rtype: str
        """
        return self._subject_id

    @subject_id.setter
    def subject_id(self, subject_id):
        """
        Sets the subject_id of this Event.

        :param subject_id: The subject_id of this Event.
        :type: str
        """

        self._subject_id = subject_id

    @property
    def event_content(self):
        """
        Gets the event_content of this Event.

        :return: The event_content of this Event.
        :rtype: EventContent
        """
        return self._event_content

    @event_content.setter
    def event_content(self, event_content):
        """
        Sets the event_content of this Event.

        :param event_content: The event_content of this Event.
        :type: EventContent
        """

        self._event_content = event_content

    @property
    def created_at(self):
        """
        Gets the created_at of this Event.

        :return: The created_at of this Event.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Event.

        :param created_at: The created_at of this Event.
        :type: str
        """

        self._created_at = created_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Event):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
