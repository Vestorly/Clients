# coding: utf-8

"""
    Vestorly API

    Vestorly Developers API

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class NewsletterSetting(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, email_day_of_week=None, email_hour=None, email_status=None, facebook_active_wall=None, facebook_day_of_week=None, facebook_hour=None, facebook_status=None, linkedin_active_wall=None, linkedin_day_of_week=None, linkedin_hour=None, linkedin_status=None, social_hour=None, social_day_of_week=None, social_title=None, social_subtitle=None, social_description=None, twitter_day_of_week=None, twitter_hour=None, twitter_status=None, social_posting_text=None, newsletter_type=None, group_id=None, montage_enabled=None, montage_title=None, montage_facebook_image_url=None, montage_linkedin_image_url=None, montage_twitter_image_url=None, newsletter_ids=None, primary_email_font=None, footer_email_font=None, email_accent_color=None, render_version=None, header_image_url=None, header_background_color=None, banner_color=None, title_color=None, footer_html=None, intro_text=None, footer_image_url=None, subject=None, salutation_text=None, body_html=None):
        """
        NewsletterSetting - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'email_day_of_week': 'int',
            'email_hour': 'int',
            'email_status': 'str',
            'facebook_active_wall': 'str',
            'facebook_day_of_week': 'int',
            'facebook_hour': 'int',
            'facebook_status': 'str',
            'linkedin_active_wall': 'str',
            'linkedin_day_of_week': 'int',
            'linkedin_hour': 'int',
            'linkedin_status': 'str',
            'social_hour': 'int',
            'social_day_of_week': 'int',
            'social_title': 'str',
            'social_subtitle': 'str',
            'social_description': 'str',
            'twitter_day_of_week': 'int',
            'twitter_hour': 'int',
            'twitter_status': 'str',
            'social_posting_text': 'str',
            'newsletter_type': 'str',
            'group_id': 'str',
            'montage_enabled': 'bool',
            'montage_title': 'str',
            'montage_facebook_image_url': 'str',
            'montage_linkedin_image_url': 'str',
            'montage_twitter_image_url': 'str',
            'newsletter_ids': 'list[str]',
            'primary_email_font': 'str',
            'footer_email_font': 'str',
            'email_accent_color': 'str',
            'render_version': 'str',
            'header_image_url': 'str',
            'header_background_color': 'str',
            'banner_color': 'str',
            'title_color': 'str',
            'footer_html': 'str',
            'intro_text': 'str',
            'footer_image_url': 'str',
            'subject': 'str',
            'salutation_text': 'str',
            'body_html': 'str'
        }

        self.attribute_map = {
            'id': '_id',
            'email_day_of_week': 'email_day_of_week',
            'email_hour': 'email_hour',
            'email_status': 'email_status',
            'facebook_active_wall': 'facebook_active_wall',
            'facebook_day_of_week': 'facebook_day_of_week',
            'facebook_hour': 'facebook_hour',
            'facebook_status': 'facebook_status',
            'linkedin_active_wall': 'linkedin_active_wall',
            'linkedin_day_of_week': 'linkedin_day_of_week',
            'linkedin_hour': 'linkedin_hour',
            'linkedin_status': 'linkedin_status',
            'social_hour': 'social_hour',
            'social_day_of_week': 'social_day_of_week',
            'social_title': 'social_title',
            'social_subtitle': 'social_subtitle',
            'social_description': 'social_description',
            'twitter_day_of_week': 'twitter_day_of_week',
            'twitter_hour': 'twitter_hour',
            'twitter_status': 'twitter_status',
            'social_posting_text': 'social_posting_text',
            'newsletter_type': 'newsletter_type',
            'group_id': 'group_id',
            'montage_enabled': 'montage_enabled',
            'montage_title': 'montage_title',
            'montage_facebook_image_url': 'montage_facebook_image_url',
            'montage_linkedin_image_url': 'montage_linkedin_image_url',
            'montage_twitter_image_url': 'montage_twitter_image_url',
            'newsletter_ids': 'newsletter_ids',
            'primary_email_font': 'primary_email_font',
            'footer_email_font': 'footer_email_font',
            'email_accent_color': 'email_accent_color',
            'render_version': 'render_version',
            'header_image_url': 'header_image_url',
            'header_background_color': 'header_background_color',
            'banner_color': 'banner_color',
            'title_color': 'title_color',
            'footer_html': 'footer_html',
            'intro_text': 'intro_text',
            'footer_image_url': 'footer_image_url',
            'subject': 'subject',
            'salutation_text': 'salutation_text',
            'body_html': 'body_html'
        }

        self._id = id
        self._email_day_of_week = email_day_of_week
        self._email_hour = email_hour
        self._email_status = email_status
        self._facebook_active_wall = facebook_active_wall
        self._facebook_day_of_week = facebook_day_of_week
        self._facebook_hour = facebook_hour
        self._facebook_status = facebook_status
        self._linkedin_active_wall = linkedin_active_wall
        self._linkedin_day_of_week = linkedin_day_of_week
        self._linkedin_hour = linkedin_hour
        self._linkedin_status = linkedin_status
        self._social_hour = social_hour
        self._social_day_of_week = social_day_of_week
        self._social_title = social_title
        self._social_subtitle = social_subtitle
        self._social_description = social_description
        self._twitter_day_of_week = twitter_day_of_week
        self._twitter_hour = twitter_hour
        self._twitter_status = twitter_status
        self._social_posting_text = social_posting_text
        self._newsletter_type = newsletter_type
        self._group_id = group_id
        self._montage_enabled = montage_enabled
        self._montage_title = montage_title
        self._montage_facebook_image_url = montage_facebook_image_url
        self._montage_linkedin_image_url = montage_linkedin_image_url
        self._montage_twitter_image_url = montage_twitter_image_url
        self._newsletter_ids = newsletter_ids
        self._primary_email_font = primary_email_font
        self._footer_email_font = footer_email_font
        self._email_accent_color = email_accent_color
        self._render_version = render_version
        self._header_image_url = header_image_url
        self._header_background_color = header_background_color
        self._banner_color = banner_color
        self._title_color = title_color
        self._footer_html = footer_html
        self._intro_text = intro_text
        self._footer_image_url = footer_image_url
        self._subject = subject
        self._salutation_text = salutation_text
        self._body_html = body_html

    @property
    def id(self):
        """
        Gets the id of this NewsletterSetting.

        :return: The id of this NewsletterSetting.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this NewsletterSetting.

        :param id: The id of this NewsletterSetting.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def email_day_of_week(self):
        """
        Gets the email_day_of_week of this NewsletterSetting.

        :return: The email_day_of_week of this NewsletterSetting.
        :rtype: int
        """
        return self._email_day_of_week

    @email_day_of_week.setter
    def email_day_of_week(self, email_day_of_week):
        """
        Sets the email_day_of_week of this NewsletterSetting.

        :param email_day_of_week: The email_day_of_week of this NewsletterSetting.
        :type: int
        """

        self._email_day_of_week = email_day_of_week

    @property
    def email_hour(self):
        """
        Gets the email_hour of this NewsletterSetting.

        :return: The email_hour of this NewsletterSetting.
        :rtype: int
        """
        return self._email_hour

    @email_hour.setter
    def email_hour(self, email_hour):
        """
        Sets the email_hour of this NewsletterSetting.

        :param email_hour: The email_hour of this NewsletterSetting.
        :type: int
        """

        self._email_hour = email_hour

    @property
    def email_status(self):
        """
        Gets the email_status of this NewsletterSetting.

        :return: The email_status of this NewsletterSetting.
        :rtype: str
        """
        return self._email_status

    @email_status.setter
    def email_status(self, email_status):
        """
        Sets the email_status of this NewsletterSetting.

        :param email_status: The email_status of this NewsletterSetting.
        :type: str
        """

        self._email_status = email_status

    @property
    def facebook_active_wall(self):
        """
        Gets the facebook_active_wall of this NewsletterSetting.

        :return: The facebook_active_wall of this NewsletterSetting.
        :rtype: str
        """
        return self._facebook_active_wall

    @facebook_active_wall.setter
    def facebook_active_wall(self, facebook_active_wall):
        """
        Sets the facebook_active_wall of this NewsletterSetting.

        :param facebook_active_wall: The facebook_active_wall of this NewsletterSetting.
        :type: str
        """

        self._facebook_active_wall = facebook_active_wall

    @property
    def facebook_day_of_week(self):
        """
        Gets the facebook_day_of_week of this NewsletterSetting.

        :return: The facebook_day_of_week of this NewsletterSetting.
        :rtype: int
        """
        return self._facebook_day_of_week

    @facebook_day_of_week.setter
    def facebook_day_of_week(self, facebook_day_of_week):
        """
        Sets the facebook_day_of_week of this NewsletterSetting.

        :param facebook_day_of_week: The facebook_day_of_week of this NewsletterSetting.
        :type: int
        """

        self._facebook_day_of_week = facebook_day_of_week

    @property
    def facebook_hour(self):
        """
        Gets the facebook_hour of this NewsletterSetting.

        :return: The facebook_hour of this NewsletterSetting.
        :rtype: int
        """
        return self._facebook_hour

    @facebook_hour.setter
    def facebook_hour(self, facebook_hour):
        """
        Sets the facebook_hour of this NewsletterSetting.

        :param facebook_hour: The facebook_hour of this NewsletterSetting.
        :type: int
        """

        self._facebook_hour = facebook_hour

    @property
    def facebook_status(self):
        """
        Gets the facebook_status of this NewsletterSetting.

        :return: The facebook_status of this NewsletterSetting.
        :rtype: str
        """
        return self._facebook_status

    @facebook_status.setter
    def facebook_status(self, facebook_status):
        """
        Sets the facebook_status of this NewsletterSetting.

        :param facebook_status: The facebook_status of this NewsletterSetting.
        :type: str
        """

        self._facebook_status = facebook_status

    @property
    def linkedin_active_wall(self):
        """
        Gets the linkedin_active_wall of this NewsletterSetting.

        :return: The linkedin_active_wall of this NewsletterSetting.
        :rtype: str
        """
        return self._linkedin_active_wall

    @linkedin_active_wall.setter
    def linkedin_active_wall(self, linkedin_active_wall):
        """
        Sets the linkedin_active_wall of this NewsletterSetting.

        :param linkedin_active_wall: The linkedin_active_wall of this NewsletterSetting.
        :type: str
        """

        self._linkedin_active_wall = linkedin_active_wall

    @property
    def linkedin_day_of_week(self):
        """
        Gets the linkedin_day_of_week of this NewsletterSetting.

        :return: The linkedin_day_of_week of this NewsletterSetting.
        :rtype: int
        """
        return self._linkedin_day_of_week

    @linkedin_day_of_week.setter
    def linkedin_day_of_week(self, linkedin_day_of_week):
        """
        Sets the linkedin_day_of_week of this NewsletterSetting.

        :param linkedin_day_of_week: The linkedin_day_of_week of this NewsletterSetting.
        :type: int
        """

        self._linkedin_day_of_week = linkedin_day_of_week

    @property
    def linkedin_hour(self):
        """
        Gets the linkedin_hour of this NewsletterSetting.

        :return: The linkedin_hour of this NewsletterSetting.
        :rtype: int
        """
        return self._linkedin_hour

    @linkedin_hour.setter
    def linkedin_hour(self, linkedin_hour):
        """
        Sets the linkedin_hour of this NewsletterSetting.

        :param linkedin_hour: The linkedin_hour of this NewsletterSetting.
        :type: int
        """

        self._linkedin_hour = linkedin_hour

    @property
    def linkedin_status(self):
        """
        Gets the linkedin_status of this NewsletterSetting.

        :return: The linkedin_status of this NewsletterSetting.
        :rtype: str
        """
        return self._linkedin_status

    @linkedin_status.setter
    def linkedin_status(self, linkedin_status):
        """
        Sets the linkedin_status of this NewsletterSetting.

        :param linkedin_status: The linkedin_status of this NewsletterSetting.
        :type: str
        """

        self._linkedin_status = linkedin_status

    @property
    def social_hour(self):
        """
        Gets the social_hour of this NewsletterSetting.

        :return: The social_hour of this NewsletterSetting.
        :rtype: int
        """
        return self._social_hour

    @social_hour.setter
    def social_hour(self, social_hour):
        """
        Sets the social_hour of this NewsletterSetting.

        :param social_hour: The social_hour of this NewsletterSetting.
        :type: int
        """

        self._social_hour = social_hour

    @property
    def social_day_of_week(self):
        """
        Gets the social_day_of_week of this NewsletterSetting.

        :return: The social_day_of_week of this NewsletterSetting.
        :rtype: int
        """
        return self._social_day_of_week

    @social_day_of_week.setter
    def social_day_of_week(self, social_day_of_week):
        """
        Sets the social_day_of_week of this NewsletterSetting.

        :param social_day_of_week: The social_day_of_week of this NewsletterSetting.
        :type: int
        """

        self._social_day_of_week = social_day_of_week

    @property
    def social_title(self):
        """
        Gets the social_title of this NewsletterSetting.

        :return: The social_title of this NewsletterSetting.
        :rtype: str
        """
        return self._social_title

    @social_title.setter
    def social_title(self, social_title):
        """
        Sets the social_title of this NewsletterSetting.

        :param social_title: The social_title of this NewsletterSetting.
        :type: str
        """

        self._social_title = social_title

    @property
    def social_subtitle(self):
        """
        Gets the social_subtitle of this NewsletterSetting.

        :return: The social_subtitle of this NewsletterSetting.
        :rtype: str
        """
        return self._social_subtitle

    @social_subtitle.setter
    def social_subtitle(self, social_subtitle):
        """
        Sets the social_subtitle of this NewsletterSetting.

        :param social_subtitle: The social_subtitle of this NewsletterSetting.
        :type: str
        """

        self._social_subtitle = social_subtitle

    @property
    def social_description(self):
        """
        Gets the social_description of this NewsletterSetting.

        :return: The social_description of this NewsletterSetting.
        :rtype: str
        """
        return self._social_description

    @social_description.setter
    def social_description(self, social_description):
        """
        Sets the social_description of this NewsletterSetting.

        :param social_description: The social_description of this NewsletterSetting.
        :type: str
        """

        self._social_description = social_description

    @property
    def twitter_day_of_week(self):
        """
        Gets the twitter_day_of_week of this NewsletterSetting.

        :return: The twitter_day_of_week of this NewsletterSetting.
        :rtype: int
        """
        return self._twitter_day_of_week

    @twitter_day_of_week.setter
    def twitter_day_of_week(self, twitter_day_of_week):
        """
        Sets the twitter_day_of_week of this NewsletterSetting.

        :param twitter_day_of_week: The twitter_day_of_week of this NewsletterSetting.
        :type: int
        """

        self._twitter_day_of_week = twitter_day_of_week

    @property
    def twitter_hour(self):
        """
        Gets the twitter_hour of this NewsletterSetting.

        :return: The twitter_hour of this NewsletterSetting.
        :rtype: int
        """
        return self._twitter_hour

    @twitter_hour.setter
    def twitter_hour(self, twitter_hour):
        """
        Sets the twitter_hour of this NewsletterSetting.

        :param twitter_hour: The twitter_hour of this NewsletterSetting.
        :type: int
        """

        self._twitter_hour = twitter_hour

    @property
    def twitter_status(self):
        """
        Gets the twitter_status of this NewsletterSetting.

        :return: The twitter_status of this NewsletterSetting.
        :rtype: str
        """
        return self._twitter_status

    @twitter_status.setter
    def twitter_status(self, twitter_status):
        """
        Sets the twitter_status of this NewsletterSetting.

        :param twitter_status: The twitter_status of this NewsletterSetting.
        :type: str
        """

        self._twitter_status = twitter_status

    @property
    def social_posting_text(self):
        """
        Gets the social_posting_text of this NewsletterSetting.

        :return: The social_posting_text of this NewsletterSetting.
        :rtype: str
        """
        return self._social_posting_text

    @social_posting_text.setter
    def social_posting_text(self, social_posting_text):
        """
        Sets the social_posting_text of this NewsletterSetting.

        :param social_posting_text: The social_posting_text of this NewsletterSetting.
        :type: str
        """

        self._social_posting_text = social_posting_text

    @property
    def newsletter_type(self):
        """
        Gets the newsletter_type of this NewsletterSetting.

        :return: The newsletter_type of this NewsletterSetting.
        :rtype: str
        """
        return self._newsletter_type

    @newsletter_type.setter
    def newsletter_type(self, newsletter_type):
        """
        Sets the newsletter_type of this NewsletterSetting.

        :param newsletter_type: The newsletter_type of this NewsletterSetting.
        :type: str
        """

        self._newsletter_type = newsletter_type

    @property
    def group_id(self):
        """
        Gets the group_id of this NewsletterSetting.

        :return: The group_id of this NewsletterSetting.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """
        Sets the group_id of this NewsletterSetting.

        :param group_id: The group_id of this NewsletterSetting.
        :type: str
        """

        self._group_id = group_id

    @property
    def montage_enabled(self):
        """
        Gets the montage_enabled of this NewsletterSetting.

        :return: The montage_enabled of this NewsletterSetting.
        :rtype: bool
        """
        return self._montage_enabled

    @montage_enabled.setter
    def montage_enabled(self, montage_enabled):
        """
        Sets the montage_enabled of this NewsletterSetting.

        :param montage_enabled: The montage_enabled of this NewsletterSetting.
        :type: bool
        """

        self._montage_enabled = montage_enabled

    @property
    def montage_title(self):
        """
        Gets the montage_title of this NewsletterSetting.

        :return: The montage_title of this NewsletterSetting.
        :rtype: str
        """
        return self._montage_title

    @montage_title.setter
    def montage_title(self, montage_title):
        """
        Sets the montage_title of this NewsletterSetting.

        :param montage_title: The montage_title of this NewsletterSetting.
        :type: str
        """

        self._montage_title = montage_title

    @property
    def montage_facebook_image_url(self):
        """
        Gets the montage_facebook_image_url of this NewsletterSetting.

        :return: The montage_facebook_image_url of this NewsletterSetting.
        :rtype: str
        """
        return self._montage_facebook_image_url

    @montage_facebook_image_url.setter
    def montage_facebook_image_url(self, montage_facebook_image_url):
        """
        Sets the montage_facebook_image_url of this NewsletterSetting.

        :param montage_facebook_image_url: The montage_facebook_image_url of this NewsletterSetting.
        :type: str
        """

        self._montage_facebook_image_url = montage_facebook_image_url

    @property
    def montage_linkedin_image_url(self):
        """
        Gets the montage_linkedin_image_url of this NewsletterSetting.

        :return: The montage_linkedin_image_url of this NewsletterSetting.
        :rtype: str
        """
        return self._montage_linkedin_image_url

    @montage_linkedin_image_url.setter
    def montage_linkedin_image_url(self, montage_linkedin_image_url):
        """
        Sets the montage_linkedin_image_url of this NewsletterSetting.

        :param montage_linkedin_image_url: The montage_linkedin_image_url of this NewsletterSetting.
        :type: str
        """

        self._montage_linkedin_image_url = montage_linkedin_image_url

    @property
    def montage_twitter_image_url(self):
        """
        Gets the montage_twitter_image_url of this NewsletterSetting.

        :return: The montage_twitter_image_url of this NewsletterSetting.
        :rtype: str
        """
        return self._montage_twitter_image_url

    @montage_twitter_image_url.setter
    def montage_twitter_image_url(self, montage_twitter_image_url):
        """
        Sets the montage_twitter_image_url of this NewsletterSetting.

        :param montage_twitter_image_url: The montage_twitter_image_url of this NewsletterSetting.
        :type: str
        """

        self._montage_twitter_image_url = montage_twitter_image_url

    @property
    def newsletter_ids(self):
        """
        Gets the newsletter_ids of this NewsletterSetting.

        :return: The newsletter_ids of this NewsletterSetting.
        :rtype: list[str]
        """
        return self._newsletter_ids

    @newsletter_ids.setter
    def newsletter_ids(self, newsletter_ids):
        """
        Sets the newsletter_ids of this NewsletterSetting.

        :param newsletter_ids: The newsletter_ids of this NewsletterSetting.
        :type: list[str]
        """

        self._newsletter_ids = newsletter_ids

    @property
    def primary_email_font(self):
        """
        Gets the primary_email_font of this NewsletterSetting.

        :return: The primary_email_font of this NewsletterSetting.
        :rtype: str
        """
        return self._primary_email_font

    @primary_email_font.setter
    def primary_email_font(self, primary_email_font):
        """
        Sets the primary_email_font of this NewsletterSetting.

        :param primary_email_font: The primary_email_font of this NewsletterSetting.
        :type: str
        """

        self._primary_email_font = primary_email_font

    @property
    def footer_email_font(self):
        """
        Gets the footer_email_font of this NewsletterSetting.

        :return: The footer_email_font of this NewsletterSetting.
        :rtype: str
        """
        return self._footer_email_font

    @footer_email_font.setter
    def footer_email_font(self, footer_email_font):
        """
        Sets the footer_email_font of this NewsletterSetting.

        :param footer_email_font: The footer_email_font of this NewsletterSetting.
        :type: str
        """

        self._footer_email_font = footer_email_font

    @property
    def email_accent_color(self):
        """
        Gets the email_accent_color of this NewsletterSetting.

        :return: The email_accent_color of this NewsletterSetting.
        :rtype: str
        """
        return self._email_accent_color

    @email_accent_color.setter
    def email_accent_color(self, email_accent_color):
        """
        Sets the email_accent_color of this NewsletterSetting.

        :param email_accent_color: The email_accent_color of this NewsletterSetting.
        :type: str
        """

        self._email_accent_color = email_accent_color

    @property
    def render_version(self):
        """
        Gets the render_version of this NewsletterSetting.

        :return: The render_version of this NewsletterSetting.
        :rtype: str
        """
        return self._render_version

    @render_version.setter
    def render_version(self, render_version):
        """
        Sets the render_version of this NewsletterSetting.

        :param render_version: The render_version of this NewsletterSetting.
        :type: str
        """

        self._render_version = render_version

    @property
    def header_image_url(self):
        """
        Gets the header_image_url of this NewsletterSetting.

        :return: The header_image_url of this NewsletterSetting.
        :rtype: str
        """
        return self._header_image_url

    @header_image_url.setter
    def header_image_url(self, header_image_url):
        """
        Sets the header_image_url of this NewsletterSetting.

        :param header_image_url: The header_image_url of this NewsletterSetting.
        :type: str
        """

        self._header_image_url = header_image_url

    @property
    def header_background_color(self):
        """
        Gets the header_background_color of this NewsletterSetting.

        :return: The header_background_color of this NewsletterSetting.
        :rtype: str
        """
        return self._header_background_color

    @header_background_color.setter
    def header_background_color(self, header_background_color):
        """
        Sets the header_background_color of this NewsletterSetting.

        :param header_background_color: The header_background_color of this NewsletterSetting.
        :type: str
        """

        self._header_background_color = header_background_color

    @property
    def banner_color(self):
        """
        Gets the banner_color of this NewsletterSetting.

        :return: The banner_color of this NewsletterSetting.
        :rtype: str
        """
        return self._banner_color

    @banner_color.setter
    def banner_color(self, banner_color):
        """
        Sets the banner_color of this NewsletterSetting.

        :param banner_color: The banner_color of this NewsletterSetting.
        :type: str
        """

        self._banner_color = banner_color

    @property
    def title_color(self):
        """
        Gets the title_color of this NewsletterSetting.

        :return: The title_color of this NewsletterSetting.
        :rtype: str
        """
        return self._title_color

    @title_color.setter
    def title_color(self, title_color):
        """
        Sets the title_color of this NewsletterSetting.

        :param title_color: The title_color of this NewsletterSetting.
        :type: str
        """

        self._title_color = title_color

    @property
    def footer_html(self):
        """
        Gets the footer_html of this NewsletterSetting.

        :return: The footer_html of this NewsletterSetting.
        :rtype: str
        """
        return self._footer_html

    @footer_html.setter
    def footer_html(self, footer_html):
        """
        Sets the footer_html of this NewsletterSetting.

        :param footer_html: The footer_html of this NewsletterSetting.
        :type: str
        """

        self._footer_html = footer_html

    @property
    def intro_text(self):
        """
        Gets the intro_text of this NewsletterSetting.

        :return: The intro_text of this NewsletterSetting.
        :rtype: str
        """
        return self._intro_text

    @intro_text.setter
    def intro_text(self, intro_text):
        """
        Sets the intro_text of this NewsletterSetting.

        :param intro_text: The intro_text of this NewsletterSetting.
        :type: str
        """

        self._intro_text = intro_text

    @property
    def footer_image_url(self):
        """
        Gets the footer_image_url of this NewsletterSetting.

        :return: The footer_image_url of this NewsletterSetting.
        :rtype: str
        """
        return self._footer_image_url

    @footer_image_url.setter
    def footer_image_url(self, footer_image_url):
        """
        Sets the footer_image_url of this NewsletterSetting.

        :param footer_image_url: The footer_image_url of this NewsletterSetting.
        :type: str
        """

        self._footer_image_url = footer_image_url

    @property
    def subject(self):
        """
        Gets the subject of this NewsletterSetting.

        :return: The subject of this NewsletterSetting.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """
        Sets the subject of this NewsletterSetting.

        :param subject: The subject of this NewsletterSetting.
        :type: str
        """

        self._subject = subject

    @property
    def salutation_text(self):
        """
        Gets the salutation_text of this NewsletterSetting.

        :return: The salutation_text of this NewsletterSetting.
        :rtype: str
        """
        return self._salutation_text

    @salutation_text.setter
    def salutation_text(self, salutation_text):
        """
        Sets the salutation_text of this NewsletterSetting.

        :param salutation_text: The salutation_text of this NewsletterSetting.
        :type: str
        """

        self._salutation_text = salutation_text

    @property
    def body_html(self):
        """
        Gets the body_html of this NewsletterSetting.

        :return: The body_html of this NewsletterSetting.
        :rtype: str
        """
        return self._body_html

    @body_html.setter
    def body_html(self, body_html):
        """
        Sets the body_html of this NewsletterSetting.

        :param body_html: The body_html of this NewsletterSetting.
        :type: str
        """

        self._body_html = body_html

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, NewsletterSetting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
