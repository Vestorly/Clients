# coding: utf-8

"""
    Vestorly API

    Vestorly Developers API

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Newsletter(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, is_sent=None, is_default=None, click_count=None, unique_click_count=None, total_click_count=None):
        """
        Newsletter - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'is_sent': 'bool',
            'is_default': 'bool',
            'click_count': 'int',
            'unique_click_count': 'int',
            'total_click_count': 'int'
        }

        self.attribute_map = {
            'id': '_id',
            'is_sent': 'is_sent',
            'is_default': 'is_default',
            'click_count': 'click_count',
            'unique_click_count': 'unique_click_count',
            'total_click_count': 'total_click_count'
        }

        self._id = id
        self._is_sent = is_sent
        self._is_default = is_default
        self._click_count = click_count
        self._unique_click_count = unique_click_count
        self._total_click_count = total_click_count

    @property
    def id(self):
        """
        Gets the id of this Newsletter.

        :return: The id of this Newsletter.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Newsletter.

        :param id: The id of this Newsletter.
        :type: str
        """

        self._id = id

    @property
    def is_sent(self):
        """
        Gets the is_sent of this Newsletter.

        :return: The is_sent of this Newsletter.
        :rtype: bool
        """
        return self._is_sent

    @is_sent.setter
    def is_sent(self, is_sent):
        """
        Sets the is_sent of this Newsletter.

        :param is_sent: The is_sent of this Newsletter.
        :type: bool
        """

        self._is_sent = is_sent

    @property
    def is_default(self):
        """
        Gets the is_default of this Newsletter.

        :return: The is_default of this Newsletter.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """
        Sets the is_default of this Newsletter.

        :param is_default: The is_default of this Newsletter.
        :type: bool
        """

        self._is_default = is_default

    @property
    def click_count(self):
        """
        Gets the click_count of this Newsletter.

        :return: The click_count of this Newsletter.
        :rtype: int
        """
        return self._click_count

    @click_count.setter
    def click_count(self, click_count):
        """
        Sets the click_count of this Newsletter.

        :param click_count: The click_count of this Newsletter.
        :type: int
        """

        self._click_count = click_count

    @property
    def unique_click_count(self):
        """
        Gets the unique_click_count of this Newsletter.

        :return: The unique_click_count of this Newsletter.
        :rtype: int
        """
        return self._unique_click_count

    @unique_click_count.setter
    def unique_click_count(self, unique_click_count):
        """
        Sets the unique_click_count of this Newsletter.

        :param unique_click_count: The unique_click_count of this Newsletter.
        :type: int
        """

        self._unique_click_count = unique_click_count

    @property
    def total_click_count(self):
        """
        Gets the total_click_count of this Newsletter.

        :return: The total_click_count of this Newsletter.
        :rtype: int
        """
        return self._total_click_count

    @total_click_count.setter
    def total_click_count(self, total_click_count):
        """
        Sets the total_click_count of this Newsletter.

        :param total_click_count: The total_click_count of this Newsletter.
        :type: int
        """

        self._total_click_count = total_click_count

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Newsletter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
