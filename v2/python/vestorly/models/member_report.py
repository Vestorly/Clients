# coding: utf-8

"""
    Vestorly API

    Vestorly Developers API

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MemberReport(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, day=None, event_count=None, originator_group_id=None, parent_originator_id=None, source=None, type=None, year=None):
        """
        MemberReport - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'day': 'int',
            'event_count': 'int',
            'originator_group_id': 'str',
            'parent_originator_id': 'str',
            'source': 'str',
            'type': 'str',
            'year': 'int'
        }

        self.attribute_map = {
            'day': 'day',
            'event_count': 'event_count',
            'originator_group_id': 'originator_group_id',
            'parent_originator_id': 'parent_originator_id',
            'source': 'source',
            'type': 'type',
            'year': 'year'
        }

        self._day = day
        self._event_count = event_count
        self._originator_group_id = originator_group_id
        self._parent_originator_id = parent_originator_id
        self._source = source
        self._type = type
        self._year = year

    @property
    def day(self):
        """
        Gets the day of this MemberReport.

        :return: The day of this MemberReport.
        :rtype: int
        """
        return self._day

    @day.setter
    def day(self, day):
        """
        Sets the day of this MemberReport.

        :param day: The day of this MemberReport.
        :type: int
        """

        self._day = day

    @property
    def event_count(self):
        """
        Gets the event_count of this MemberReport.

        :return: The event_count of this MemberReport.
        :rtype: int
        """
        return self._event_count

    @event_count.setter
    def event_count(self, event_count):
        """
        Sets the event_count of this MemberReport.

        :param event_count: The event_count of this MemberReport.
        :type: int
        """

        self._event_count = event_count

    @property
    def originator_group_id(self):
        """
        Gets the originator_group_id of this MemberReport.

        :return: The originator_group_id of this MemberReport.
        :rtype: str
        """
        return self._originator_group_id

    @originator_group_id.setter
    def originator_group_id(self, originator_group_id):
        """
        Sets the originator_group_id of this MemberReport.

        :param originator_group_id: The originator_group_id of this MemberReport.
        :type: str
        """

        self._originator_group_id = originator_group_id

    @property
    def parent_originator_id(self):
        """
        Gets the parent_originator_id of this MemberReport.

        :return: The parent_originator_id of this MemberReport.
        :rtype: str
        """
        return self._parent_originator_id

    @parent_originator_id.setter
    def parent_originator_id(self, parent_originator_id):
        """
        Sets the parent_originator_id of this MemberReport.

        :param parent_originator_id: The parent_originator_id of this MemberReport.
        :type: str
        """

        self._parent_originator_id = parent_originator_id

    @property
    def source(self):
        """
        Gets the source of this MemberReport.

        :return: The source of this MemberReport.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this MemberReport.

        :param source: The source of this MemberReport.
        :type: str
        """

        self._source = source

    @property
    def type(self):
        """
        Gets the type of this MemberReport.

        :return: The type of this MemberReport.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this MemberReport.

        :param type: The type of this MemberReport.
        :type: str
        """

        self._type = type

    @property
    def year(self):
        """
        Gets the year of this MemberReport.

        :return: The year of this MemberReport.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """
        Sets the year of this MemberReport.

        :param year: The year of this MemberReport.
        :type: int
        """

        self._year = year

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MemberReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
