# coding: utf-8

"""
    Vestorly API

    Vestorly Developers API

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Settings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, company=None, picture_url=None, website=None, disclosure=None, adv_brochure=None, slug=None, name=None, orgsetting=None, feature=None, personalsetting=None):
        """
        Settings - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'company': 'str',
            'picture_url': 'str',
            'website': 'str',
            'disclosure': 'str',
            'adv_brochure': 'str',
            'slug': 'str',
            'name': 'str',
            'orgsetting': 'OrgSetting',
            'feature': 'Features',
            'personalsetting': 'PersonalSettings'
        }

        self.attribute_map = {
            'id': '_id',
            'company': 'company',
            'picture_url': 'picture_url',
            'website': 'website',
            'disclosure': 'disclosure',
            'adv_brochure': 'adv_brochure',
            'slug': 'slug',
            'name': 'name',
            'orgsetting': 'orgsetting',
            'feature': 'feature',
            'personalsetting': 'personalsetting'
        }

        self._id = id
        self._company = company
        self._picture_url = picture_url
        self._website = website
        self._disclosure = disclosure
        self._adv_brochure = adv_brochure
        self._slug = slug
        self._name = name
        self._orgsetting = orgsetting
        self._feature = feature
        self._personalsetting = personalsetting

    @property
    def id(self):
        """
        Gets the id of this Settings.

        :return: The id of this Settings.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Settings.

        :param id: The id of this Settings.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def company(self):
        """
        Gets the company of this Settings.

        :return: The company of this Settings.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """
        Sets the company of this Settings.

        :param company: The company of this Settings.
        :type: str
        """

        self._company = company

    @property
    def picture_url(self):
        """
        Gets the picture_url of this Settings.

        :return: The picture_url of this Settings.
        :rtype: str
        """
        return self._picture_url

    @picture_url.setter
    def picture_url(self, picture_url):
        """
        Sets the picture_url of this Settings.

        :param picture_url: The picture_url of this Settings.
        :type: str
        """

        self._picture_url = picture_url

    @property
    def website(self):
        """
        Gets the website of this Settings.

        :return: The website of this Settings.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """
        Sets the website of this Settings.

        :param website: The website of this Settings.
        :type: str
        """

        self._website = website

    @property
    def disclosure(self):
        """
        Gets the disclosure of this Settings.

        :return: The disclosure of this Settings.
        :rtype: str
        """
        return self._disclosure

    @disclosure.setter
    def disclosure(self, disclosure):
        """
        Sets the disclosure of this Settings.

        :param disclosure: The disclosure of this Settings.
        :type: str
        """

        self._disclosure = disclosure

    @property
    def adv_brochure(self):
        """
        Gets the adv_brochure of this Settings.

        :return: The adv_brochure of this Settings.
        :rtype: str
        """
        return self._adv_brochure

    @adv_brochure.setter
    def adv_brochure(self, adv_brochure):
        """
        Sets the adv_brochure of this Settings.

        :param adv_brochure: The adv_brochure of this Settings.
        :type: str
        """

        self._adv_brochure = adv_brochure

    @property
    def slug(self):
        """
        Gets the slug of this Settings.

        :return: The slug of this Settings.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """
        Sets the slug of this Settings.

        :param slug: The slug of this Settings.
        :type: str
        """

        self._slug = slug

    @property
    def name(self):
        """
        Gets the name of this Settings.

        :return: The name of this Settings.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Settings.

        :param name: The name of this Settings.
        :type: str
        """

        self._name = name

    @property
    def orgsetting(self):
        """
        Gets the orgsetting of this Settings.

        :return: The orgsetting of this Settings.
        :rtype: OrgSetting
        """
        return self._orgsetting

    @orgsetting.setter
    def orgsetting(self, orgsetting):
        """
        Sets the orgsetting of this Settings.

        :param orgsetting: The orgsetting of this Settings.
        :type: OrgSetting
        """

        self._orgsetting = orgsetting

    @property
    def feature(self):
        """
        Gets the feature of this Settings.

        :return: The feature of this Settings.
        :rtype: Features
        """
        return self._feature

    @feature.setter
    def feature(self, feature):
        """
        Sets the feature of this Settings.

        :param feature: The feature of this Settings.
        :type: Features
        """

        self._feature = feature

    @property
    def personalsetting(self):
        """
        Gets the personalsetting of this Settings.

        :return: The personalsetting of this Settings.
        :rtype: PersonalSettings
        """
        return self._personalsetting

    @personalsetting.setter
    def personalsetting(self, personalsetting):
        """
        Sets the personalsetting of this Settings.

        :param personalsetting: The personalsetting of this Settings.
        :type: PersonalSettings
        """

        self._personalsetting = personalsetting

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Settings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
