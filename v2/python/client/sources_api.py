#!/usr/bin/env python
# coding: utf-8

"""
SourcesApi.py
Copyright 2015 Reverb Technologies, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os
import urllib

from models import *


class SourcesApi(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    
    
    def index(self, **kwargs):
        """Read a list of sources

        Args:
            
            vestorly_auth, str: Authentication token (required)
            
            
            ids, str: Return sources with list of IDs provided (required)
            
            
        
        Returns: 
        """

        allParams = ['vestorly_auth', 'ids']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method index" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = 'api/v2/sources.json'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = ''
        headerParams['Content-Type'] = ''

        
        if ('vestorly_auth' in params):
            queryParams['vestorly-auth'] = self.apiClient.toPathValue(params['vestorly_auth'])
        
        if ('ids' in params):
            queryParams['ids'] = self.apiClient.toPathValue(params['ids'])
        

        

        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        
        
    
    def show(self, **kwargs):
        """Read a specific source

        Args:
            
            vestorly_auth, str: Authentication token (required)
            
            
            id, str: Id of source (required)
            
            
        
        Returns: 
        """

        allParams = ['vestorly_auth', 'id']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method show" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = 'api/v2/sources/{id}.json'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = ''
        headerParams['Content-Type'] = ''

        
        if ('vestorly_auth' in params):
            queryParams['vestorly-auth'] = self.apiClient.toPathValue(params['vestorly_auth'])
        

        

        
        if ('id' in params):
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = urllib.quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        
        
    
    def update(self, **kwargs):
        """Create a source

        Args:
            
            id, str: Id of g (required)
            
            
            source, str: JSON block of source data (required)
            
            
        
        Returns: Source
        """

        allParams = ['id', 'source']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method update" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = 'api/v2/sources/{id}.json'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = ''
        headerParams['Content-Type'] = ''

        

        

        
        if ('id' in params):
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = urllib.quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        
        if ('source' in params):
            formParams['source'] = params['source']
        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Source')
        return responseObject
        
        
        
    


