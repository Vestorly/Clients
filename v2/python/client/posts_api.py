#!/usr/bin/env python
# coding: utf-8

"""
PostsApi.py
Copyright 2015 Reverb Technologies, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os
import urllib

from models import *


class PostsApi(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    
    
    def index(self, **kwargs):
        """Read a list of posts

        Args:
            
            vestorly_auth, str: Authentication token (required)
            
            
            is_published, str: Filter by published articles (required)
            
            
            external_url_source, str: Filter by posts with external URL source (required)
            
            
            ids, str: Return posts with list of IDs provided (required)
            
            
        
        Returns: 
        """

        allParams = ['vestorly_auth', 'is_published', 'external_url_source', 'ids']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method index" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = 'api/v2/posts.json'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = ''
        headerParams['Content-Type'] = ''

        
        if ('vestorly_auth' in params):
            queryParams['vestorly-auth'] = self.apiClient.toPathValue(params['vestorly_auth'])
        
        if ('is_published' in params):
            queryParams['is_published'] = self.apiClient.toPathValue(params['is_published'])
        
        if ('external_url_source' in params):
            queryParams['external_url_source'] = self.apiClient.toPathValue(params['external_url_source'])
        
        if ('ids' in params):
            queryParams['ids'] = self.apiClient.toPathValue(params['ids'])
        

        

        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        
        
    
    def create(self, **kwargs):
        """Create an post

        Args:
            
            post, str: JSON block of post data (required)
            
            
        
        Returns: 
        """

        allParams = ['post']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method create" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = 'api/v2/posts.json'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = ''
        headerParams['Content-Type'] = ''

        

        

        

        
        if ('post' in params):
            formParams['post'] = params['post']
        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        
        
    
    def show(self, **kwargs):
        """Retreive a single post

        Args:
            
            vestorly_auth, str: Authentication token (required)
            
            
            id, str: Id of post (required)
            
            
        
        Returns: Post
        """

        allParams = ['vestorly_auth', 'id']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method show" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = 'api/v2/posts/{id}.json'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = ''
        headerParams['Content-Type'] = ''

        
        if ('vestorly_auth' in params):
            queryParams['vestorly-auth'] = self.apiClient.toPathValue(params['vestorly_auth'])
        

        

        
        if ('id' in params):
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = urllib.quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Post')
        return responseObject
        
        
        
    
    def update(self, **kwargs):
        """Create an advisor

        Args:
            
            id, str: Id of post (required)
            
            
            post, str: JSON block of post data (required)
            
            
        
        Returns: Post
        """

        allParams = ['id', 'post']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method update" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = 'api/v2/posts/{id}.json'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = ''
        headerParams['Content-Type'] = ''

        

        

        
        if ('id' in params):
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = urllib.quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        
        if ('post' in params):
            formParams['post'] = params['post']
        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Post')
        return responseObject
        
        
        
    
    def destroy(self, **kwargs):
        """Destroy a post

        Args:
            
            id, str: Id of pow5 (required)
            
            
        
        Returns: 
        """

        allParams = ['id']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method destroy" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = 'api/v2/posts/{id}.json'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = ''
        headerParams['Content-Type'] = ''

        

        

        
        if ('id' in params):
            replacement = str(self.apiClient.toPathValue(params['id']))
            replacement = urllib.quote(replacement)
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        
        
    


